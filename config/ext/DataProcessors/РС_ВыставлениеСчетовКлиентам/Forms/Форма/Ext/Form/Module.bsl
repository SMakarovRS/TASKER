&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
	ДокументыДвиж.ПолучитьЭлементы().Очистить();
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНаСервере()
	ЭлДерево = ДанныеФормыВЗначение(Дерево, Тип("ДеревоЗначений"));
	Если ЭлДерево.Строки.Количество() > 0 Тогда
		//ЭлДерево = ДанныеФормыВЗначение(Дерево, Тип("ДеревоЗначений"));
		ЭлДерево.Строки.Очистить();
		ЗначениеВДанныеФормы(ЭлДерево, Дерево);
	КонецЕсли;
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕстьNull(РС_РаботыОстаткиИОбороты.ФактическоеВремяНачальныйОстаток, 0 ) КАК ФактическоеВремяНачальныйОстаток,
	|	ЕстьNull(РС_РаботыОстаткиИОбороты.ВремяКлиентаНачальныйОстаток, 0 ) КАК ВремяКлиентаНачальныйОстаток,
	|	ЕстьNull(РС_РаботыОстаткиИОбороты.ФактическоеВремяПриход, 0 ) КАК ФактическоеВремяПриход,
	|	ЕстьNull(РС_РаботыОстаткиИОбороты.ВремяКлиентаПриход, 0 ) КАК ВремяКлиентаПриход,
	|	ЕстьNull(РС_РаботыОстаткиИОбороты.ФактическоеВремяРасход, 0 ) КАК ФактическоеВремяРасход,
	|	ЕстьNull(РС_РаботыОстаткиИОбороты.ВремяКлиентаРасход, 0 ) КАК ВремяКлиентаРасход,
	|	Задание1.Проект КАК Проект,
	|	Задание1.Клиент КАК Клиент,
	|	Задание1.Дата КАК Дата,
	|	РС_Занятость.Задание.ДатаВыполнения КАК ДатаВыполнения,
	|	Задание1.Проект.ОтветственныйЗаПроект КАК ОтветственныйЗаПроект,
	|	Задание1.Проект.ОтветственныйЗаОтчет КАК ОтветственныйЗаОтчет,
	|	Задание1.Проект.РуководительПроекта КАК Руководитель,
	|	ВЫБОР
	|		КОГДА РС_Занятость.Задание.ТекущийЭтап.СостояниеЭтапа = &Состояние
	|		И Задание1.ДатаВыполнения <= &Дата2
	|			ТОГДА РС_РаботыОстаткиИОбороты.ВремяКлиентаНачальныйОстаток + РС_РаботыОстаткиИОбороты.ВремяКлиентаПриход - РС_РаботыОстаткиИОбороты.ВремяКлиентаРасход
	|			ИНАЧЕ 0
	|	КОНЕЦ КАК ВремяКВыставлению,
	|	ВЫБОР
	|		КОГДА РС_Занятость.Задание.ТекущийЭтап.СостояниеЭтапа <> &Состояние
	|			ТОГДА (РС_РаботыОстаткиИОбороты.ФактическоеВремяНачальныйОстаток + РС_РаботыОстаткиИОбороты.ФактическоеВремяПриход- РС_РаботыОстаткиИОбороты.ФактическоеВремяРасход)
	|			ИНАЧЕ 0
	|	КОНЕЦ КАК НезакрытоЧасов,
	|	ВЫБОР 
	|		КОГДА РС_Занятость.Задание.ТекущийЭтап.СостояниеЭтапа = &Состояние
	|			И РС_Занятость.Задание.ДатаВыполнения >= &Дата2  
	|			ТОГДА (РС_РаботыОстаткиИОбороты.ФактическоеВремяНачальныйОстаток + РС_РаботыОстаткиИОбороты.ФактическоеВремяПриход - РС_РаботыОстаткиИОбороты.ФактическоеВремяРасход)
	|			ИНАЧЕ 0
	|	КОНЕЦ КАК ЗакрытоПозже,
	|	РС_Занятость.Задание КАК Задание,
	|	РС_Занятость.Ссылка КАК Занятость,
	|	РС_Работы.Регистратор КАК Отчет
	|ИЗ
	|	РегистрНакопления.РС_Работы.ОстаткиИОбороты(&Дата1 ,&Дата2 , , , ) КАК РС_РаботыОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РС_Занятость КАК РС_Занятость
	|       	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание КАК Задание1
	|			ПО РС_Занятость.Задание = Задание1.Ссылка
	|		ПО РС_РаботыОстаткиИОбороты.Занятость = РС_Занятость.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РС_Работы КАК РС_Работы 
	|		ПО (РС_РаботыОстаткиИОбороты.Занятость = РС_Работы.Занятость) 
	|			И (ТИПЗНАЧЕНИЯ(РС_Работы.Регистратор) = ТИП(Документ.РС_ОтчетКлиенту))
	|ГДЕ
	|	(&НеФильроватьПоКлиенту ИЛИ Задание1.Клиент = &ФильтрКлиент)
	|И	(&НеФильроватьПоОтветственному ИЛИ (Задание1.Проект.РуководительПроекта = &ФильтрОтветственный ИЛИ Задание1.Проект.ОтветственныйЗаОтчет = &ФильтрОтветственный))
	|И	(&НеФильроватьПоРуководителю ИЛИ Задание1.Проект.РуководительПроекта = &ФильтрРуководитель)
	|	
	|
	|УПОРЯДОЧИТЬ ПО
	|	Клиент,
	|	Дата,
	|	Отчет
	|ИТОГИ
	|	СУММА(ФактическоеВремяНачальныйОстаток),
	|	СУММА(ВремяКлиентаНачальныйОстаток),
	|	СУММА(ФактическоеВремяПриход),
	|	СУММА(ВремяКлиентаПриход),
	|	СУММА(ФактическоеВремяРасход),
	|	СУММА(ВремяКлиентаРасход),
	|	СУММА(ВремяКВыставлению),
	|	СУММА(НезакрытоЧасов),
	|	СУММА(ЗакрытоПозже)
	|ПО
	|	Клиент,
	|	Проект,
	|	Задание ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("Дата2", КонецДня(Период.ДатаОкончания));
	
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияЭтаповПроцесса.Закрыт);
	
	Запрос.УстановитьПараметр("ФильтрКлиент", Клиент);
	Запрос.УстановитьПараметр("ФильтрОтветственный", Ответственный);
	Запрос.УстановитьПараметр("ФильтрРуководитель", Руководитель);
	//Запрос.УстановитьПараметр("НеВыводитьЗакрытые", НеВыводитьЗакрытые);
	
	Запрос.УстановитьПараметр("НеФильроватьПоКлиенту", ?(НЕ ЗначениеЗаполнено(Клиент.Наименование), ИСТИНА, ЛОЖЬ));
	Запрос.УстановитьПараметр("НеФильроватьПоОтветственному", ?(НЕ ЗначениеЗаполнено(Ответственный.Наименование), ИСТИНА, ЛОЖЬ));
	Запрос.УстановитьПараметр("НеФильроватьПоРуководителю", ?(НЕ ЗначениеЗаполнено(Руководитель.Наименование), ИСТИНА, ЛОЖЬ));	
	
	ДеревоЗнач = Новый ДеревоЗначений();
	ДеревоЗнач = ДанныеФормыВЗначение(Дерево, Тип(ДеревоЗнач));
	РезВрем =Запрос.Выполнить();
	РезультатЗапроса = РезВрем.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	//ИтогПоФактическомВремениНО=0;
	//ИтогПоВремениКиентаНО=0;
	ИтогПоФактическомВремениПриход=0;
	//ИтогПоВремениКиентаПриход=0;
	//ИтогПоФактическомВремениРасход=0;
	//ИтогПоВремениКиентаРасход=0;
	ИтогПоВремениКВыставлению=0;
	ИтогПоЗакрытымПозже = 0;
	ИтогПоНезакрытымЧасам = 0;
	
	Если РезультатЗапроса.Строки.Количество() <> 0 Тогда
		Для каждого ГруппаКлиент из РезультатЗапроса.Строки цикл
			Если НеВыводитьЗакрытые И ГруппаКлиент.ВремяКВыставлению <= 0 И ГруппаКлиент.НезакрытоЧасов<=0 тогда
				ИтогПоЗакрытымПозже=ИтогПоЗакрытымПозже - ГруппаКлиент.ЗакрытоПозже;
				ИтогПоВремениКВыставлению=ИтогПоВремениКВыставлению - ГруппаКлиент.ВремяКВыставлению;
				ИтогПоНезакрытымЧасам = ИтогПоНезакрытымЧасам - ГруппаКлиент.НезакрытоЧасов;
				Продолжить;
			КонецЕсли;
			НоваяСтрокаГрКлиент = ДеревоЗнач.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаГрКлиент, ГруппаКлиент);
			//ИтогПоВремениКиентаНО = ИтогПоВремениКиентаНО + НоваяСтрокаГрКлиент.ВремяКлиентаНачальныйОстаток;
			//ИтогПоФактическомВремениНО = ИтогПоФактическомВремениНО + НоваяСтрокаГрКлиент.ФактическоеВремяНачальныйОстаток;
			//ИтогПоВремениКиентаПриход = ИтогПоВремениКиентаПриход + НоваяСтрокаГрКлиент.ВремяКлиентаПриход;
			ИтогПоФактическомВремениПриход = ИтогПоФактическомВремениПриход + НоваяСтрокаГрКлиент.ФактическоеВремяПриход;
			//ИтогПоВремениКиентаРасход = ИтогПоВремениКиентаРасход + НоваяСтрокаГрКлиент.ВремяКлиентаРасход;
			//ИтогПоФактическомВремениРасход = ИтогПоФактическомВремениРасход + НоваяСтрокаГрКлиент.ФактическоеВремяРасход;
			ИтогПоВремениКВыставлению = ИтогПоВремениКВыставлению + НоваяСтрокаГрКлиент.ВремяКВыставлению;
			ИтогПоЗакрытымПозже = ИтогПоЗакрытымПозже + НоваяСтрокаГрКлиент.ЗакрытоПозже;
			ИтогПоНезакрытымЧасам = ИтогПоНезакрытымЧасам + НоваяСтрокаГрКлиент.НезакрытоЧасов;
			Для каждого ГруппаПроект из ГруппаКлиент.Строки цикл
				Если НеВыводитьЗакрытые И ГруппаПроект.ВремяКВыставлению <= 0 И ГруппаПроект.НезакрытоЧасов<=0 тогда
						ИтогПоЗакрытымПозже = ИтогПоЗакрытымПозже - ГруппаПроект.ЗакрытоПозже;
						НоваяСтрокаГрКлиент.ЗакрытоПозже = НоваяСтрокаГрКлиент.ЗакрытоПозже - ГруппаПроект.ЗакрытоПозже;
						НоваяСтрокаГрКлиент.ФактическоеВремяПриход = НоваяСтрокаГрКлиент.ФактическоеВремяПриход - ГруппаПроект.ФактическоеВремяПриход; 
						Продолжить;
					КонецЕсли;
				НоваяСтрокаГрПроект = НоваяСтрокаГрКлиент.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаГрПроект, ГруппаПроект);
				НоваяСтрокаГрПроект.Руководитель = ?(ЗначениеЗаполнено(ГруппаПроект.Руководитель),ГруппаПроект.Руководитель, ""); 
				НоваяСтрокаГрПроект.Выбор = ложь;
				НоваяСтрокаГрПроект.Клиент = ГруппаПроект.Проект;
				Для каждого ГруппаЗадачи из ГруппаПроект.Строки цикл
					Если НеВыводитьЗакрытые И ГруппаЗадачи.ВремяКВыставлению <= 0 И ГруппаЗадачи.НезакрытоЧасов<=0 тогда
						ИтогПоЗакрытымПозже = ИтогПоЗакрытымПозже - ГруппаЗадачи.ЗакрытоПозже;
						НоваяСтрокаГрКлиент.ЗакрытоПозже = НоваяСтрокаГрКлиент.ЗакрытоПозже - ГруппаЗадачи.ЗакрытоПозже;
						НоваяСтрокаГрКлиент.ФактическоеВремяПриход = НоваяСтрокаГрКлиент.ФактическоеВремяПриход - ГруппаЗадачи.ФактическоеВремяПриход;
						НоваяСтрокаГрПроект.ЗакрытоПозже = НоваяСтрокаГрПроект.ЗакрытоПозже - ГруппаЗадачи.ЗакрытоПозже;
						НоваяСтрокаГрПроект.ФактическоеВремяПриход = НоваяСтрокаГрПроект.ФактическоеВремяПриход - ГруппаЗадачи.ФактическоеВремяПриход;
						Продолжить;	
					КонецЕсли;
					НоваяСтрокаЗадача = НоваяСтрокаГрПроект.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаЗадача, ГруппаЗадачи);
					НоваяСтрокаЗадача.Выбор = ложь;
					НоваяСтрокаЗадача.Клиент = ГруппаЗадачи.Задание;
					НоваяСтрокаЗадача.Руководитель = "";
					ИерархияОтчетов = Новый Структура;
					Для каждого Регистратор из ГруппаЗадачи.Строки цикл
						Если Регистратор.Отчет = Null Тогда
							Продолжить
						Иначе 
							ИерархияОтчетов.Вставить("СсылкаОтчет",Регистратор.Отчет.Ссылка);
							ИерархияОтчетов.Вставить("СсылкаПроект",НоваяСтрокаГрПроект.Клиент);
							Если НоваяСтрокаЗадача.СсылкиНаДокументы.НайтиПоЗначению(ИерархияОтчетов) = Неопределено Тогда
								НоваяСтрокаЗадача.СсылкиНаДокументы.Добавить(ИерархияОтчетов);
								Если НоваяСтрокаГрПроект.СсылкиНаДокументы.НайтиПоЗначению(ИерархияОтчетов) = Неопределено Тогда
									НоваяСтрокаГрПроект.СсылкиНаДокументы.Добавить(ИерархияОтчетов);
								КонецЕсли;
								Если НоваяСтрокаГрКлиент.СсылкиНаДокументы.НайтиПоЗначению(ИерархияОтчетов) = Неопределено Тогда
									НоваяСтрокаГрКлиент.СсылкиНаДокументы.Добавить(ИерархияОтчетов);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
				
		ЗначениеВДанныеФормы(ДеревоЗнач, Дерево);
		
		//Элементы.ФактическоеВремяНачальныйОстаток.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		//Элементы.ВремяКлиентаНачальныйОстаток.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		Элементы.ФактическоеВремяПриход.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		//Элементы.ВремяКлиентаПриход.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		//Элементы.ФактическоеВремяРасход.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		//Элементы.ВремяКлиентаРасход.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		Элементы.ВремяКВыставлению.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		Элементы.ЗакрытоПозже.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		Элементы.НезакрытыеЧасы.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		
		
		//Элементы.ВремяКлиентаНачальныйОстаток.ТекстПодвала = ИтогПоВремениКиентаНО;
		//Элементы.ФактическоеВремяНачальныйОстаток.ТекстПодвала = ИтогПоФактическомВремениНО;
		//Элементы.ВремяКлиентаПриход.ТекстПодвала = ИтогПоВремениКиентаПриход;
		Элементы.ФактическоеВремяПриход.ТекстПодвала = ИтогПоФактическомВремениПриход;
		//Элементы.ВремяКлиентаРасход.ТекстПодвала = ИтогПоВремениКиентаРасход;
		//Элементы.ФактическоеВремяРасход.ТекстПодвала = ИтогПоФактическомВремениРасход;
		Элементы.ВремяКВыставлению.ТекстПодвала = ИтогПоВремениКВыставлению;
		Элементы.ЗакрытоПозже.ТекстПодвала = ИтогПоЗакрытымПозже;
		Элементы.НезакрытыеЧасы.ТекстПодвала = ИтогПоНезакрытымЧасам;
		
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ОтчетКлиенту(Команда)
	ОтчетКлиентуНаСервере();
	ОткрытьФорму("Документ.РС_ОтчетКлиенту.ФормаСписка");
КонецПроцедуры

&НаСервере
Процедура ОтчетКлиентуНаСервере()
	ДеревоЗнач = Новый ДеревоЗначений();
	ДеревоЗнач = ДанныеФормыВЗначение(Дерево, Тип(ДеревоЗнач));
	Если ДеревоЗнач.Строки.Количество() = 0 Тогда
		Сообщить("Таблица не заполнена!");
		Возврат;
	КонецЕсли;
	ТаблицаЗначений = Новый ТаблицаЗначений();
	ТаблицаЗначений.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаЗначений.Колонки.Добавить("Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	Для каждого ЗаписьКлиент из ДеревоЗнач.Строки цикл 
		Если ЗаписьКлиент.Выбор Тогда
			Для каждого СтрокаПроект из ЗаписьКлиент.Строки цикл
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Клиент = ЗаписьКлиент.Клиент;
				НоваяСтрока.Проект = СтрокаПроект.Клиент;	
			КонецЦикла;
		Иначе
			Для каждого СтрокаПроект из ЗаписьКлиент.Строки цикл
				Если СтрокаПроект.Выбор Тогда
					НоваяСтрока = ТаблицаЗначений.Добавить();
					НоваяСтрока.Клиент = ЗаписьКлиент.Клиент;
					НоваяСтрока.Проект = СтрокаПроект.Клиент;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремТаблица.Клиент КАК Клиент,
	|	ВремТаблица.Проект КАК Проект
	|ПОМЕСТИТЬ ВремТаблица
	|ИЗ
	|	&ТабличнаяЧасть КАК ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремТаблица.Клиент КАК Клиент,
	|	ВремТаблица.Проект КАК Проект
	|ИЗ
	|	ВремТаблица КАК ВремТаблица
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ТабличнаяЧасть" , ТаблицаЗначений);
	//Запрос.УстановитьПараметр("Дата" ,КонецДня(Период.ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет выбранных элементов!"); 	
	КонецЕсли;
	Выборка = РезультатЗапроса.Выгрузить();
	Для каждого Строка из Выборка Цикл                       
		НовыйОтчетКлиенту = Документы.РС_ОтчетКлиенту.СоздатьДокумент();
		НовыйОтчетКлиенту.Дата = ТекущаяДата();
		НовыйОтчетКлиенту.Период = КонецДня(Период.ДатаОкончания);
		НовыйОтчетКлиенту.Клиент = Строка.Клиент;
		НовыйОтчетКлиенту.СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.ВРаботе;
		СписокПроектов = Новый СписокЗначений;
		СписокПроектов.Добавить(Строка.Проект);
		//НовыйОтчетКлиенту.Проект = СписокПроектов;
		#Область кококомментарий
		//ВыборкаДетальныеЗаписи = ВыборкаПоГРуппировкам.Выбрать();
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//	Если ВыборкаДетальныеЗаписи.КОплате <> Null Тогда
		//		НоваяСтрока = НовыйОтчетКлиенту.СписокЗанятостейЗакрытые.Добавить();
		//	Иначе
		//		Если ВыборкаДетальныеЗаписи.ЗакрытоПозже <> 0 Тогда
		//			Продолжить	
		//		КонецЕсли;
		//		НоваяСтрока = НовыйОтчетКлиенту.СписокЗанятостейНезакрытые.Добавить();
		//	КонецЕсли;
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		//КонецЦикла;
		#КонецОбласти
		НовыйОтчетКлиенту.ЗаполнитьСписокЗанятостей(СписокПроектов);
		НовыйОтчетКлиенту.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТабПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено тогда
		ДеревоТабПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.СсылкиНаДокументы);
		ЭлементыДерева = ДокументыДвиж.ПолучитьЭлементы();
		Для каждого Элемент из ЭлементыДерева цикл
			ИдентификаторСтроки=Элемент.ПолучитьИдентификатор();
			Элементы.ДокументыДвиж.Развернуть(ИдентификаторСтроки, ИСТИНА);				
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДеревоТабПриАктивизацииСтрокиНаСервере(СсылкиНаДокументы)
	
	ТаблицаОтчетов = ДанныеФормыВЗначение(ДокументыДвиж, Тип("ДеревоЗначений"));
	Если ТаблицаОтчетов.Строки.Количество() > 0 Тогда
		ТаблицаОтчетов.Строки.Очистить();
		ЗначениеВДанныеФормы(ТаблицаОтчетов, ДокументыДвиж);
	КонецЕсли;
	НоваяЗаписьКлиент = Неопределено;
	НоваяГрПроект = Неопределено;
	НоваяЗапись = Неопределено;
	
	Если СсылкиНаДокументы.Количество() > 0 Тогда
		Для Каждого Регистратор Из СсылкиНаДокументы цикл
			СсылкаОтчет = Регистратор.Значение.СсылкаОтчет;
			СсылкаПроект = Регистратор.Значение.СсылкаПроект;
				Если ТаблицаОтчетов.Строки.Количество() = 0 Тогда
					НоваяЗаписьКлиент = ТаблицаОтчетов.Строки.Добавить();
					НоваяЗаписьКлиент.Документ = Регистратор.Значение.СсылкаОтчет.Клиент;
					НоваяГрПроект = НоваяЗаписьКлиент.Строки.Добавить();
					НоваяГрПроект.Документ = СсылкаПроект;
					НоваяЗапись = НоваяГрПроект.Строки.Добавить();
					НоваяЗапись.Документ = СсылкаОтчет;
					НоваяЗапись.ВремяФакт = СсылкаОтчет.ВсегоФактЗакрытые;
					НоваяЗапись.ВремяКОплате = СсылкаОтчет.ВсегоКОплатеЗакрытые;
					Продолжить;
				КонецЕсли;
				Если НоваяЗаписьКлиент.Строки.Найти(СсылкаПроект, "Документ") = Неопределено тогда
					НоваяГрПроект = НоваяЗаписьКлиент.Строки.Добавить();
					НоваяГрПроект.Документ = СсылкаПроект;
					НоваяЗапись = НоваяГрПроект.Строки.Добавить();
					НоваяЗапись.Документ = СсылкаОтчет;
					НоваяЗапись.ВремяФакт = СсылкаОтчет.ВсегоФактЗакрытые;
					НоваяЗапись.ВремяКОплате = СсылкаОтчет.ВсегоКОплатеЗакрытые;
					Продолжить;
				КонецЕсли;
				Если НоваяГрПроект.Строки.Найти(СсылкаОтчет, "Документ") = Неопределено тогда
					НоваяЗапись = НоваяГрПроект.Строки.Добавить();
					НоваяЗапись.Документ = СсылкаОтчет;
					НоваяЗапись.ВремяФакт = СсылкаОтчет.ВсегоФактЗакрытые;
					НоваяЗапись.ВремяКОплате = СсылкаОтчет.ВсегоКОплатеЗакрытые;
					Продолжить;
				КонецЕсли;	
			КонецЦикла;
			ЗначениеВДанныеФормы(ТаблицаОтчетов, ДокументыДвиж);
		КонецЕсли;
	КонецПроцедуры
	
&НаКлиенте
Процедура ДокументыДвижПриАктивизацииЯчейки(Элемент)
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено ИЛИ НЕ(ТипЗнч(ТекущиеДанные.Документ)=Тип("ДокументСсылка.РС_ОтчетКлиенту")) Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийЭлементПоля = Элемент.ТекущийЭлемент;
		
		Если ТекущийЭлементПоля = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьЗначение(, ТекущиеДанные.Документ);	
		
	КонецПроцедуры
	
	
	
	
	
	
