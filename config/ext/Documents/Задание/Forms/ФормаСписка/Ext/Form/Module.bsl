//++РС Консалт Вечканов Владимир 07.01.2021 № Задачи 127
&НаКлиенте
Процедура РСК_УстановитьВариантНавигацииПоКлиентуПосле(Команда)
	ПереключитьПанельНавигации(Команда);
	РСК_ПанельНавигацииРазвернутьВсе();
	СохранитьНастройкиОтборов();
КонецПроцедуры

&НаКлиенте
Процедура РСК_УстановитьВариантНавигацииПоПроектуПосле(Команда)
	ПереключитьПанельНавигации(Команда);
	РСК_ПанельНавигацииРазвернутьВсе();
	СохранитьНастройкиОтборов();
КонецПроцедуры

&НаСервере
&Вместо("ПереключитьПанельНавигацииСервер")
Процедура РСК_ПереключитьПанельНавигацииСервер(ИмяКоманды)
	
	НеОтрабатыватьАктивизациюПанелиНавигации = Истина;
	
	МассиСсылок = ДинамическийСписокВТаблицуЗначений();
	
	Если ИмяКоманды = "УстановитьВариантНавигацииПоИнициатору" Тогда
		ЗаполнитьПанельИнициаторов(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИнициаторы;
		
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоПроцессу" Тогда
		ЗаполнитьПанельПроцессов(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПроцессы;
		
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоПриоритету" Тогда
		ЗаполнитьПанельПриоритетов(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПриоритеты;
		
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоИсполнителю" Тогда
		ЗаполнитьПанельИсполнителей(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИсполнители;
		
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоГруппамЗаданий" Тогда
		ЗаполнитьПанельГруппыЗаданий(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаГруппы;
		
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоТипамПроцессов" Тогда
		ЗаполнитьПанельТипыПроцессов(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаТипыПроцессов;
	//++РС Консалт Вечканов Владимир 07.01.2021 № Задачи 127	
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоКлиенту" Тогда
		ЗаполнитьПанельКлиенты(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаКлиенты;
		
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоПроекту" Тогда
		ЗаполнитьПанельПроекты(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПроекты;	
	//--РС Консалт Вечканов Владимир 07.01.2021 № Задачи 127	
	КонецЕсли;
	
	ПанельНавигацииСкрыта 		= Ложь;
	ИмяТекущейПанелиНавигации 	= Элементы.СтраницыПанелиНавигации.ТекущаяСтраница.Имя;
	ОбновитьВидимость();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельКлиенты(Знач МассивСсылок = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст =		
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(Задание.Клиент.Ссылка, ""ПустаяСсылка"") КАК Клиент,
			|	СУММА(ВЫБОР
			|			КОГДА Задание.Выполнено
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК Количество,
			|	СУММА(ВЫБОР
			|			КОГДА Задание.Выполнено
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(Задание.ПлановаяДлительность, 0)
			|		КОНЕЦ) КАК ЧасыПлан,
			|	ЕСТЬNULL(Задание.Проект.Ссылка, ""ПустаяСсылка"") КАК Проект
			|ИЗ
			|	Документ.Задание КАК Задание
			|ГДЕ
			|	Задание.Ссылка В(&МассивСсылок)
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(Задание.Клиент.Ссылка, ""ПустаяСсылка""),
			|	ЕСТЬNULL(Задание.Проект.Ссылка, ""ПустаяСсылка"")
			|ИТОГИ ПО
			|	ОБЩИЕ,
			|	Клиент КАК Клиент
			|АВТОУПОРЯДОЧИВАНИЕ";
		
	Запрос.УстановитьПараметр("МассивСсылок",	МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Клиенты.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= Клиенты.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Клиенты'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа 		= Истина;
		СтрокиПервыйУровень 				= СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл			
			
			НоваяСтрока						= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			Если Строка2.Клиент <> "ПустаяСсылка" Тогда
				НоваяСтрока.Представление 	= Строка(Строка2.Клиент);
			Иначе
				НоваяСтрока.Представление 	= НСтр("ru = '<Не выбран>'");
			КонецЕсли;
			НоваяСтрока.ИндексКартинки		= 1;
			НоваяСтрока.ЭтоГруппа 			= Истина;
			
			Для Каждого Подстрока Из Строка2.Строки Цикл
					
				НоваяПодСтрока					= НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПодСтрока, Подстрока);
				НоваяПодСтрока.Представление	= ?(Подстрока.Проект <> "ПустаяСсылка", Подстрока.Проект, НСтр("ru = '<Не выбран>'"));
				НоваяПодСтрока.ИндексКартинки	= 2;
				НоваяПодСтрока.ЭтоГруппа 		= Ложь;
					
			КонецЦикла;
			
		КонецЦикла;	
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельПроекты(Знач МассивСсылок = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст =		
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(Задание.Проект.Ссылка, ""ПустаяСсылка"") КАК Проект,
			|	СУММА(ВЫБОР
			|			КОГДА Задание.Выполнено
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК Количество,
			|	СУММА(ВЫБОР
			|			КОГДА Задание.Выполнено
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(Задание.ПлановаяДлительность, 0)
			|		КОНЕЦ) КАК ЧасыПлан
			|ИЗ
			|	Документ.Задание КАК Задание
			|ГДЕ
			|	Задание.Ссылка В(&МассивСсылок)
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(Задание.Проект.Ссылка, ""ПустаяСсылка"")
			|ИТОГИ ПО
			|	ОБЩИЕ,
			|	Проект КАК Проект
			|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("МассивСсылок",	МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Проекты.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= Проекты.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Проекты'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа 		= Истина;
		СтрокиПервыйУровень 				= СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл			
			
			НоваяСтрока						= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			Если Строка2.Проект <> "ПустаяСсылка" Тогда
				НоваяСтрока.Представление 	= Строка(Строка2.Проект);
			Иначе
				НоваяСтрока.Представление 	= НСтр("ru = '<Не выбран>'");
			КонецЕсли;
			НоваяСтрока.ИндексКартинки		= 2;
			НоваяСтрока.ЭтоГруппа 			= Ложь;

		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
&После("ПанельНавигацииРазвернутьВсе")
Процедура РСК_ПанельНавигацииРазвернутьВсе()
	
	НеОтрабатыватьАктивизациюПанелиНавигации	= Истина;
	ТекущаяСтраницаПанелиНавигации 				= Элементы.СтраницыПанелиНавигации.ТекущаяСтраница;
	
	Если ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаКлиенты Тогда
		ИмяДерева 	= "Клиенты";
		ИмяПоля 	= "Клиент";
		ТекТаблица 	= Клиенты;
		ТекЭлемент 	= Элементы.КлиентыПанелиНавигации;
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаПроекты Тогда
		ИмяДерева 	= "Проекты";
		ИмяПоля 	= "Проект";
		ТекТаблица 	= Проекты;
		ТекЭлемент 	= Элементы.ПроектыПанелиНавигации;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТекТаблица.ПолучитьЭлементы() Цикл
		ТекЭлемент.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
	НайденныеСтроки =  НастройкиДеревьевПанелиНавигации.НайтиСтроки(Новый Структура("ИмяДерева",ИмяДерева));
	ИдентификаторСтроки = 0;
	Если НайденныеСтроки.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля,
					ИдентификаторСтроки,ТекТаблица.ПолучитьЭлементы(),НайденныеСтроки[0].ТекущееЗначение,Ложь);
		Элементы[НайденныеСтроки[0].ИмяДерева + "ПанелиНавигации"].ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
&Вместо("УстановитьЗаголовокВидаПанелиНавигации")
Процедура РСК_УстановитьЗаголовокВидаПанелиНавигации(ЗначениеОтбора = Неопределено)
	
	Для Каждого ПодчиненныйЭлемент Из Элементы.ВыборВариантаНавигации.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("КнопкаФормы") Тогда
			ПодчиненныйЭлемент.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ПанельНавигацииСкрыта Тогда
		Если ПустаяСтрока(ЗаголовокПанелиНавигации) Тогда
			ЗаголовокПанелиНавигации = " ";
		КонецЕсли;
		Элементы.ВыборВариантаНавигации.Заголовок = ЗаголовокПанелиНавигации;
		Элементы.ВыборВариантаНавигации.Подсказка = ЗаголовокПанелиНавигацииПодсказка;
	Иначе
	
		Если Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИнициаторы Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По инициаторам'");
			Элементы.УстановитьВариантНавигацииПоИнициатору.Пометка = Истина;
			
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПроцессы Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По процессам'");
			Элементы.УстановитьВариантНавигацииПоПроцессу.Пометка = Истина;
						
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПриоритеты Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По приоритетам'");
			Элементы.УстановитьВариантНавигацииПоПриоритету.Пометка = Истина;
			
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИсполнители Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По исполнителям'");
			Элементы.УстановитьВариантНавигацииПоИсполнителю.Пометка = Истина;
			
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаГруппы Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По группам'");
			Элементы.УстановитьВариантНавигацииПоГруппамЗаданий.Пометка = Истина;
		
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаТипыПроцессов Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По типам'");
			Элементы.УстановитьВариантНавигацииПоТипамПроцессов.Пометка = Истина;
		//++РС Консалт Вечканов Владимир 07.01.2021 № Задачи 127	
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаКлиенты Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По клиентам/проектам'");
			Элементы.УстановитьВариантНавигацииПоКлиенту.Пометка = Истина;
			
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПроекты Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По проектам'");
			Элементы.УстановитьВариантНавигацииПоПроекту.Пометка = Истина;	
		//--РС Консалт Вечканов Владимир 07.01.2021 № Задачи 127	
		КонецЕсли;
		
		Элементы.ВыборВариантаНавигации.Заголовок = ЗаголовокПанелиНавигации;
		Элементы.ВыборВариантаНавигации.Подсказка = НСтр("ru = 'Выбор варианта...'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("ОбработатьАктивизациюСтрокиПанелиНавигации")
Процедура РСК_ОбработатьАктивизациюСтрокиПанелиНавигации()
	
	Если ПанельНавигацииСкрыта Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменениеТекущейСтрокиПанелиНавигации Тогда
		ИзменениеТекущейСтрокиПанелиНавигации = Ложь;
	Иначе 
		ИзменениеТекущейСтрокиПанелиНавигации = Истина;
	КонецЕсли;
	
	ТаблицаОтбора 					= "";
	СтруктураОтбораЗначение 		= Неопределено;
	СтруктураОтбораОписаниеТипов 	= Неопределено;
	ПредставлениеОтбора 			= "";
	СтруктураОтбора 				= Неопределено;
	
	Если Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИнициаторы Тогда
		
		ТекущиеДанные = Элементы.ИнициаторыПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ТекущиеДанные.ЭтоГруппа И ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				
				Значение = НСтр("ru = 'Все'");
				
			ИначеЕсли НЕ ТекущиеДанные.ЭтоГруппа Тогда
					
				Значение = ТекущиеДанные.Инициатор;
				
			Иначе
				
				Значение = Новый СписокЗначений;
				Для Каждого Стр Из ТекущиеДанные.ПолучитьЭлементы() Цикл
					Значение.Добавить(Стр.Инициатор);
					Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
						Значение.Добавить(Стр2.Инициатор);
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаОтбора 					= "Инициаторы";
			СтруктураОтбораЗначение 		= Значение;
			СтруктураОтбораОписаниеТипов 	= Неопределено;
			СтруктураОтбора 				= Новый Структура("Значение, ОписаниеТипов", Значение, Неопределено);
			ПредставлениеОтбора 			= ТекущиеДанные.Инициатор;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПроцессы Тогда
		
		ТекущиеДанные = Элементы.ПроцессыПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ЭтоГруппа И ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				
				ТаблицаОтбора 					= "Процессы";
				СтруктураОтбораЗначение 		= НСтр("ru = 'Все'");
				СтруктураОтбораОписаниеТипов 	= Неопределено;
				СтруктураОтбора 				= Новый Структура("Значение,ОписаниеТипов", НСтр("ru = 'Все'"), 
					Неопределено);
				ПредставлениеОтбора 			= ТекущиеДанные.Процесс;
				
			ИначеЕсли ТекущиеДанные.ЭтоГруппа Тогда
				
				Значение = Новый СписокЗначений;
				Для Каждого Стр Из ТекущиеДанные.ПолучитьЭлементы() Цикл
					Значение.Добавить(Стр.Процесс);
				КонецЦикла;
				
				ТаблицаОтбора 					= "Процессы";
				СтруктураОтбораЗначение 		= Значение;
				СтруктураОтбораОписаниеТипов 	= Неопределено;
				СтруктураОтбора 				= Новый Структура("Значение,ОписаниеТипов", Значение, Неопределено);
				ПредставлениеОтбора 			= ТекущиеДанные.Процесс;
				
			Иначе
				
				ТаблицаОтбора 					= "Процессы";
				СтруктураОтбораЗначение 		= ТекущиеДанные.Процесс;
				СтруктураОтбораОписаниеТипов 	= ТекущиеДанные.ТекущийЭтап;
				СтруктураОтбора 				= Новый Структура("Значение,ТекущийЭтап", ТекущиеДанные.Процесс, 
					ТекущиеДанные.ТекущийЭтап);
				ПредставлениеОтбора 			= ТекущиеДанные.Процесс;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПриоритеты Тогда
		
		ТекущиеДанные = Элементы.ПриоритетыПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ЭтоГруппа Тогда
				
				Если ИмяНавигации <> "Приоритеты" ИЛИ ОтборНавигацииЗначение <> НСтр("ru = 'Все'") Тогда 
					
					ТаблицаОтбора 				= "Приоритеты";
					СтруктураОтбораЗначение 	= НСтр("ru = 'Все'");
					СтруктураОтбораОписаниеТипов= Неопределено;
					СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", НСтр("ru = 'Все'"), 
						Неопределено);
					ПредставлениеОтбора 		= ТекущиеДанные.Приоритет;
					
				КонецЕсли;
				
			Иначе
				
				ТаблицаОтбора 				= "Приоритеты";
				СтруктураОтбораЗначение 	= ТекущиеДанные.Приоритет;
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", ТекущиеДанные.Приоритет, 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.Приоритет;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИсполнители Тогда
		
		ТекущиеДанные = Элементы.ИсполнителиПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ЭтоГруппа Тогда
				
				ТаблицаОтбора 				= "Исполнители";
				СтруктураОтбораЗначение 	= НСтр("ru = 'Все'");
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", НСтр("ru = 'Все'"), 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.Исполнитель;
				
			Иначе
				
				ТаблицаОтбора 				= "Исполнители";
				СтруктураОтбораЗначение 	= ТекущиеДанные.Исполнитель;
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", ТекущиеДанные.Исполнитель, 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.Исполнитель;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаГруппы Тогда
		
		ТекущиеДанные = Элементы.ГруппыЗаданийПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			
				ТаблицаОтбора 				= "ГруппаЗадания";
				СтруктураОтбораЗначение 	= НСтр("ru = 'Все'");
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение, ОписаниеТипов", НСтр("ru = 'Все'"), 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные;
				
		Иначе
			
			ТаблицаОтбора 					= "ГруппаЗадания";
			СтруктураОтбораЗначение 		= ТекущиеДанные.ГруппаЗадания;
			СтруктураОтбораОписаниеТипов	= Неопределено;
			СтруктураОтбора 				= Новый Структура("Значение, ОписаниеТипов", ТекущиеДанные.ГруппаЗадания, 
				Неопределено);
			ПредставлениеОтбора 			= ТекущиеДанные.ГруппаЗадания;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаТипыПроцессов Тогда
		
		ТекущиеДанные = Элементы.ТипыПроцессовПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ЭтоГруппа Тогда
								
				ТаблицаОтбора 				= "ТипыПроцессов";
				СтруктураОтбораЗначение 	= НСтр("ru = 'Все'");
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", НСтр("ru = 'Все'"), 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.ТипПроцесса;
				
			Иначе
				
				ТаблицаОтбора 				= "ТипыПроцессов";
				СтруктураОтбораЗначение 	= ТекущиеДанные.ТипПроцесса;
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", ТекущиеДанные.ТипПроцесса, 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.ТипПроцесса;
				
			КонецЕсли;
		КонецЕсли;
	//++РС Консалт Вечканов Владимир 07.01.2021 № Задачи 127	
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаКлиенты Тогда
		
		ТекущиеДанные = Элементы.КлиентыПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ТекущиеДанные.ЭтоГруппа И ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				
				Значение = НСтр("ru = 'Все'");
				
			ИначеЕсли НЕ ТекущиеДанные.ЭтоГруппа Тогда
					
				Значение = ТекущиеДанные.Проект;
				
				ТаблицаОтбора 					= "Проекты";
				СтруктураОтбораЗначение 		= Значение;
				СтруктураОтбораОписаниеТипов 	= Неопределено;
				СтруктураОтбора 				= Новый Структура("Значение, ОписаниеТипов", Значение, Неопределено);
				ПредставлениеОтбора 			= ТекущиеДанные.Проект;
			Иначе
				
				Значение = ТекущиеДанные.Клиент;
				
				ТаблицаОтбора 					= "Клиенты";
				СтруктураОтбораЗначение 		= Значение;
				СтруктураОтбораОписаниеТипов 	= Неопределено;
				СтруктураОтбора 				= Новый Структура("Значение, ОписаниеТипов", Значение, Неопределено);
				ПредставлениеОтбора 			= ТекущиеДанные.Клиент;
			КонецЕсли;
		
		//ТекущиеДанные = Элементы.КлиентыПанелиНавигации.ТекущиеДанные;
		//Если ТекущиеДанные <> Неопределено Тогда
		//	Если ТекущиеДанные.ЭтоГруппа Тогда
		//		
		//		ТаблицаОтбора 				= "Клиенты";
		//		СтруктураОтбораЗначение 	= НСтр("ru = 'Все'");
		//		СтруктураОтбораОписаниеТипов= Неопределено;
		//		СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", НСтр("ru = 'Все'"), 
		//			Неопределено);
		//		ПредставлениеОтбора 		= ТекущиеДанные.Клиент;
		//		
		//	Иначе
		//		
		//		ТаблицаОтбора 				= "Клиенты";
		//		СтруктураОтбораЗначение 	= ТекущиеДанные.Клиент;
		//		СтруктураОтбораОписаниеТипов= Неопределено;
		//		СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", ТекущиеДанные.Клиент, 
		//			Неопределено);
		//		ПредставлениеОтбора 		= ТекущиеДанные.Клиент;
			//	
			//КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПроекты Тогда
		
		ТекущиеДанные = Элементы.ПроектыПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ЭтоГруппа Тогда
				
				ТаблицаОтбора 				= "Проекты";
				СтруктураОтбораЗначение 	= НСтр("ru = 'Все'");
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", НСтр("ru = 'Все'"), 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.Проект;
				
			Иначе
				
				ТаблицаОтбора 				= "Проекты";
				СтруктураОтбораЗначение 	= ТекущиеДанные.Проект;
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", ТекущиеДанные.Проект, 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.Проект;
				
			КонецЕсли;
		КонецЕсли;	
	//--РС Консалт Вечканов Владимир 07.01.2021 № Задачи 127	
	КонецЕсли;
	
	Если ТаблицаОтбора <> ИмяНавигации ИЛИ СтруктураОтбораЗначение <> ОтборНавигацииЗначение 
		ИЛИ СтруктураОтбораОписаниеТипов <> ОтборНавигацииОписаниеТипов Тогда
		
		ИзменитьОтборПоПанелиНавигации(ТаблицаОтбора, СтруктураОтбора);
		СохранитьТекущееАктивноеЗначениеВНастройках(ТаблицаОтбора, ПредставлениеОтбора);
		
		ИмяНавигации 				= ТаблицаОтбора;
		ОтборНавигацииЗначение 		= СтруктураОтбораЗначение;
		ОтборНавигацииОписаниеТипов	= СтруктураОтбораОписаниеТипов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РСК_КлиентыПанелиНавигацииПриАктивизацииСтрокиПосле(Элемент)
	ИнициаторыПриАктивизацииСтроки(Элемент);
КонецПроцедуры

&НаСервере
&Вместо("ИзменитьОтборПоПанелиНавигации")
Процедура РСК_ИзменитьОтборПоПанелиНавигации(Знач ИмяТаблицы, Знач ДанныеДляОбработки);
	
	ГруппаОтбора = СоздатьГруппуОтбораПанелиНавигации();
	
	Если ДанныеДляОбработки = Неопределено Тогда
		ЗаголовокПанелиНавигации = НСтр("ru = 'Все'");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		"ОтборПанелиНавигации");
		
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляОбработки.Значение = НСтр("ru = 'Все'") Тогда
		ЗаголовокПанелиНавигации = ДанныеДляОбработки.Значение;
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		"ОтборПанелиНавигации");
		
		Возврат;
	КонецЕсли;
	
	Если ИмяТаблицы = "Инициаторы" Тогда
		
		#Область ОтборИнициатор
		ИмяПоля = "Инициатор";
		ПравоеЗначение = ДанныеДляОбработки.Значение;
		Если ПравоеЗначение = Неопределено Тогда
			
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
			ЗначениеОтбора = Новый Массив;
			ЗначениеОтбора.Добавить(Неопределено);
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.ВнешниеПользователи.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.КонтактныеЛица.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.ПотенциальныеКлиенты.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
			
		Иначе
			
			Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
				ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			ЗначениеОтбора = ДанныеДляОбработки.Значение;
			
		КонецЕсли;
						
		ИмяОтбора = НСтр("ru = 'Инициатор'");
		#КонецОбласти
		
	ИначеЕсли ИмяТаблицы = "Процессы" Тогда
		
		#Область Процессы
		Если ДанныеДляОбработки.Свойство("ТекущийЭтап") Тогда
			ИмяПоля						= "ТекущийЭтап";
			ВидСравненияЭлементаОтбора	= ВидСравненияКомпоновкиДанных.Равно;
			ПравоеЗначение				= ДанныеДляОбработки.ТекущийЭтап;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, ИмяПоля,
																   ВидСравненияЭлементаОтбора, ПравоеЗначение);
		КонецЕсли;
															   
		ИмяПоля = "Процесс";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ПравоеЗначение = ДанныеДляОбработки.Значение;
		
		ИмяОтбора = НСтр("ru = 'Процесс'");
		ЗначениеОтбора = ДанныеДляОбработки.Значение;
		#КонецОбласти
		
	ИначеЕсли ИмяТаблицы = "Приоритеты" Тогда
		
		#Область Приоритеты
		ИмяПоля = "Приоритет";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ПравоеЗначение = ДанныеДляОбработки.Значение;
		
		ИмяОтбора = НСтр("ru = 'Приоритет'");
		ЗначениеОтбора = ДанныеДляОбработки.Значение;
		#КонецОбласти
		
	ИначеЕсли ИмяТаблицы = "Исполнители" Тогда
		
		#Область Исполнители
		ИмяПоля = "ТекущийИсполнитель";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора 	= ВидСравненияКомпоновкиДанных.ВСписке;
			ПравоеЗначение 				= ДанныеДляОбработки.Значение;
			ЗначениеОтбора				= ДанныеДляОбработки.Значение;
			
		ИначеЕсли ДанныеДляОбработки.Значение = "ПустаяСсылка" Тогда
			ВидСравненияЭлементаОтбора 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ПравоеЗначение				= Неопределено;
			ЗначениеОтбора				= "<Не выбран>";
			
		Иначе	
			ВидСравненияЭлементаОтбора	= ВидСравненияКомпоновкиДанных.Равно;
			ПравоеЗначение				= ДанныеДляОбработки.Значение;
			ЗначениеОтбора				= ДанныеДляОбработки.Значение;
			
		КонецЕсли;
		ИмяОтбора 		= НСтр("ru = 'Исполнители'");
		#КонецОбласти
		
	ИначеЕсли ИмяТаблицы = "ГруппаЗадания" Тогда
		
		#Область ГруппаЗадания
		ИмяПоля = "ГруппаЗадания";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ПравоеЗначение	= ДанныеДляОбработки.Значение;
		ИмяОтбора		= НСтр("ru = 'Группа задания'");
		ЗначениеОтбора	= ДанныеДляОбработки.Значение;
		#КонецОбласти
		
	ИначеЕсли ИмяТаблицы = "ТипыПроцессов" Тогда
		
		#Область ТипыПроцессов
		ИмяПоля = "ТипПроцесса";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ПравоеЗначение = ДанныеДляОбработки.Значение;
		
		ИмяОтбора = НСтр("ru = 'Тип документа'");
		ЗначениеОтбора = ДанныеДляОбработки.Значение;
		#КонецОбласти
	//++РС Консалт Вечканов Владимир 07.01.2021 № Задачи 127	
	ИначеЕсли ИмяТаблицы = "Клиенты" Тогда
		
		#Область Клиенты
		ИмяПоля = "Клиент";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора 	= ВидСравненияКомпоновкиДанных.ВСписке;
			ПравоеЗначение 				= ДанныеДляОбработки.Значение;
			ЗначениеОтбора				= ДанныеДляОбработки.Значение;
			
		ИначеЕсли ДанныеДляОбработки.Значение = "ПустаяСсылка" Тогда
			ВидСравненияЭлементаОтбора 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ПравоеЗначение				= Неопределено;
			ЗначениеОтбора				= "<Не выбран>";
			
		Иначе	
			ВидСравненияЭлементаОтбора	= ВидСравненияКомпоновкиДанных.Равно;
			ПравоеЗначение				= ДанныеДляОбработки.Значение;
			ЗначениеОтбора				= ДанныеДляОбработки.Значение;
			
		КонецЕсли;
		ИмяОтбора 		= НСтр("ru = 'Клиенты'");
		#КонецОбласти
		
	ИначеЕсли ИмяТаблицы = "Проекты" Тогда
		
		#Область Проекты
		ИмяПоля = "Проект";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора 	= ВидСравненияКомпоновкиДанных.ВСписке;
			ПравоеЗначение 				= ДанныеДляОбработки.Значение;
			ЗначениеОтбора				= ДанныеДляОбработки.Значение;
			
		ИначеЕсли ДанныеДляОбработки.Значение = "ПустаяСсылка" Тогда
			ВидСравненияЭлементаОтбора 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ПравоеЗначение				= Неопределено;
			ЗначениеОтбора				= "<Не выбран>";
			
		Иначе	
			ВидСравненияЭлементаОтбора	= ВидСравненияКомпоновкиДанных.Равно;
			ПравоеЗначение				= ДанныеДляОбработки.Значение;
			ЗначениеОтбора				= ДанныеДляОбработки.Значение;
			
		КонецЕсли;
		ИмяОтбора 		= НСтр("ru = 'Проекты'");
		#КонецОбласти	
	//--РС Консалт Вечканов Владимир 07.01.2021 № Задачи 127	
	Иначе
		
		ЗаголовокПанелиНавигации = "";
		Возврат;
		
	КонецЕсли;
	
	ЗаголовокПанелиНавигации = ИмяОтбора;
	Если СтрДлина(ЗаголовокПанелиНавигации) > 30 Тогда
		ЗаголовокПанелиНавигации = Лев(ЗаголовокПанелиНавигации, 27) + "...";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора ,ИмяПоля, 
		ВидСравненияЭлементаОтбора, ПравоеЗначение);
	
	КонецПроцедуры	
//--РС Консалт Вечканов Владимир 07.01.2021 № Задачи 127

//++РС Консалт Вечканов Владимир 08.01.2021 № Задачи 125
&НаСервере
&Вместо("ЗаполнитьПанельИнициаторов")
Процедура РСК_ЗаполнитьПанельИнициаторов(Знач МассивСсылок = Неопределено)
		
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Пользователи)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА &СтрокаПользователи
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.ФизическиеЛица)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА &СтрокаФизическиеЛица
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Контрагенты)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА &СтрокаКонтрагенты
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.КонтактныеЛица)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
		|			ТОГДА &СтрокаКонтактныеЛица
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Подразделения)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|			ТОГДА &СтрокаПодразделения
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Сотрудники)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА &СтрокаСотрудники
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.ПотенциальныеКлиенты)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.ПотенциальныеКлиенты.ПустаяСсылка)
		|			ТОГДА &СтрокаПотенциальныеКлиенты
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Организации)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА &СтрокаОрганизации
		|		ИНАЧЕ &СтрокаИнициаторНеВыбран
		|	КОНЕЦ КАК Группа,
		|	Задание.Инициатор КАК Инициатор,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Задание.Инициатор) КАК ИнициаторПредставление,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(Задание.ПлановаяДлительность, 0)
		|		КОНЕЦ) КАК ЧасыПлан
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И Задание.Ссылка В(&МассивСсылок)
		|
		|СГРУППИРОВАТЬ ПО
		|	Задание.Инициатор,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Пользователи)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА &СтрокаПользователи
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.ФизическиеЛица)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА &СтрокаФизическиеЛица
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Контрагенты)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА &СтрокаКонтрагенты
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.КонтактныеЛица)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
		|			ТОГДА &СтрокаКонтактныеЛица
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Подразделения)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|			ТОГДА &СтрокаПодразделения
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Сотрудники)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА &СтрокаСотрудники
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.ПотенциальныеКлиенты)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.ПотенциальныеКлиенты.ПустаяСсылка)
		|			ТОГДА &СтрокаПотенциальныеКлиенты
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Организации)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА &СтрокаОрганизации
		|		ИНАЧЕ &СтрокаИнициаторНеВыбран
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Группа,
		|	Инициатор
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	Группа,
		|	Инициатор,
		|	ИнициаторПредставление
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	СтрокаИнициаторНеВыбран = НСтр("ru = 'Инициатор не выбран'");
	
	// Строки локализации.
	Запрос.УстановитьПараметр("СтрокаФизическиеЛица",		НСтр("ru = 'Физические лица'"));
	Запрос.УстановитьПараметр("СтрокаПользователи",   		НСтр("ru = 'Пользователи'"));
	Запрос.УстановитьПараметр("СтрокаКонтрагенты", 	  		НСтр("ru = 'Контрагенты'"));
	Запрос.УстановитьПараметр("СтрокаКонтактныеЛица", 		НСтр("ru = 'Контактные лица'"));
	Запрос.УстановитьПараметр("СтрокаПодразделения",  		НСтр("ru = 'Подразделения'"));
	Запрос.УстановитьПараметр("СтрокаСотрудники",  			НСтр("ru = 'Сотрудники'"));
	Запрос.УстановитьПараметр("СтрокаПотенциальныеКлиенты",	НСтр("ru = 'Потенциальные клиенты'"));
	Запрос.УстановитьПараметр("СтрокаОрганизации",			НСтр("ru = 'Организации'"));
	Запрос.УстановитьПараметр("СтрокаИнициаторНеВыбран",	СтрокаИнициаторНеВыбран);
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий", 				
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 	
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава", 						
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
		
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",				
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Инициаторы.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= Инициаторы.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Инициаторы'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа = Истина;
		СтрокиПервыйУровень 				= СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл
			НоваяСтрока					= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			НоваяСтрока.Представление	= Строка(Строка2.Группа);
			НоваяСтрока.ИндексКартинки	= 1;
			
			Если СтрокаИнициаторНеВыбран <> Строка2.Группа Тогда
				
				НоваяСтрока.ЭтоГруппа = Истина;
			
				Для Каждого Подстрока Из Строка2.Строки Цикл
					
					НоваяПодСтрока					= НоваяСтрока.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НоваяПодСтрока, Подстрока);
					НоваяПодСтрока.Представление	= ?(ЗначениеЗаполнено(Подстрока.Инициатор), 
						Подстрока.ИнициаторПредставление, НСтр("ru = '<Не выбран>'"));
					НоваяПодСтрока.ИндексКартинки	= 2;
					НоваяПодСтрока.ЭтоГруппа 		= Ложь;
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока.ЭтоГруппа = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
&Вместо("ЗаполнитьПанельПроцессов")
Процедура РСК_ЗаполнитьПанельПроцессов(Знач МассивСсылок = Неопределено)
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Процесс КАК Процесс,
		|	Задание.ТекущийЭтап КАК ТекущийЭтап,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(Задание.ПлановаяДлительность, 0)
		|		КОНЕЦ) КАК ЧасыПлан				
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И Задание.Ссылка В(&МассивСсылок)		
		|
		|СГРУППИРОВАТЬ ПО
		|	Задание.Процесс,
		|	Задание.ТекущийЭтап
		|
		|УПОРЯДОЧИТЬ ПО
		|	Процесс,
		|	ТекущийЭтап
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	Процесс,
		|	ТекущийЭтап
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий", 				
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 	
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава",
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
		
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",				
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Процессы.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= Процессы.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Процессы'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа = Истина;
		СтрокиПервыйУровень = СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл
			НоваяСтрока					= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			НоваяСтрока.Представление	= Строка(Строка2.Процесс);
			НоваяСтрока.ИндексКартинки	= 1;
			НоваяСтрока.ЭтоГруппа = Истина;
			
			Для Каждого Подстрока Из Строка2.Строки Цикл
				
				НоваяПодСтрока					= НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПодСтрока, Подстрока);
				НоваяПодСтрока.Представление	= ?(ЗначениеЗаполнено(Подстрока.ТекущийЭтап), 
					Строка(Подстрока.ТекущийЭтап), 
					НСтр("ru = '<Не выбран>'"));
				НоваяПодСтрока.ИндексКартинки	= 2;
				НоваяПодСтрока.ЭтоГруппа = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
&Вместо("ЗаполнитьПанельПриоритетов")
Процедура РСК_ЗаполнитьПанельПриоритетов(Знач МассивСсылок = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Приоритет КАК Приоритет,
		|	ВЫБОР
		|		КОГДА Задание.Приоритет <> ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.ПустаяСсылка)
		|			ТОГДА Задание.Приоритет
		|		ИНАЧЕ ""Не выбран""
		|	КОНЕЦ КАК Представление,
		|	ВЫБОР
		|		КОГДА Задание.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.ПустаяСсылка)
		|				И НЕ Задание.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(Задание.ПлановаяДлительность, 0)
		|		КОНЕЦ) КАК ЧасыПлан		
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И Задание.Ссылка В(&МассивСсылок)				
		|
		|СГРУППИРОВАТЬ ПО
		|	Задание.Приоритет,
		|	ВЫБОР
		|		КОГДА Задание.Приоритет <> ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.ПустаяСсылка)
		|			ТОГДА Задание.Приоритет
		|		ИНАЧЕ ""Не выбран""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Задание.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.ПустаяСсылка)
		|				И НЕ Задание.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Задание.Приоритет.Порядок
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	Приоритет
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий", 				
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 	
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
	
	Запрос.УстановитьПараметр("МассивСсылок",	МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Приоритеты.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= Приоритеты.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Приоритеты'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа = Истина;
		СтрокиПервыйУровень = СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл
			
			НоваяСтрока					= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			НоваяСтрока.ИндексКартинки	= 2;
			НоваяСтрока.ЭтоГруппа = Ложь;

		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
&Вместо("ЗаполнитьПанельИсполнителей")
Процедура РСК_ЗаполнитьПанельИсполнителей(Знач МассивСсылок = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст =		
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(Задание.ТекущийИсполнитель.Ссылка, ""ПустаяСсылка"") КАК Исполнитель,
			|	СУММА(ВЫБОР
			|			КОГДА Задание.Выполнено
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК Количество,
			|	СУММА(ВЫБОР
			|			КОГДА Задание.Выполнено
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(Задание.ПлановаяДлительность, 0)
			|		КОНЕЦ) КАК ЧасыПлан
			|ИЗ
			|	Документ.Задание КАК Задание
			|ГДЕ
			|	(&ДоступностьРолиПросмотраЧужихЗаданий
			|			ИЛИ &ДоступностьРолиПолныеПрава
			|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
			|				И ВЫБОР
			|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
			|	И Задание.Ссылка В(&МассивСсылок)
			|	И (ТИПЗНАЧЕНИЯ(Задание.ТекущийИсполнитель) = ТИП(Справочник.Пользователи)
			|				И Задание.ТекущийИсполнитель.Недействителен = ЛОЖЬ
			|			ИЛИ ТИПЗНАЧЕНИЯ(Задание.ТекущийИсполнитель) = ТИП(Справочник.ГруппыПользователей)
			|			ИЛИ Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(Задание.ТекущийИсполнитель.Ссылка, ""ПустаяСсылка"")
			|ИТОГИ ПО
			|	ОБЩИЕ,
			|	Исполнитель КАК Исполнитель
			|АВТОУПОРЯДОЧИВАНИЕ";
		
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 	
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава",	
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
		
	Запрос.УстановитьПараметр("МассивСсылок",	МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Исполнители.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= Исполнители.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Исполнители'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа 		= Истина;
		СтрокиПервыйУровень 				= СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл			
			
			НоваяСтрока						= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			Если Строка2.Исполнитель <> "ПустаяСсылка" Тогда
				НоваяСтрока.Представление 	= Строка(Строка2.Исполнитель);
			Иначе
				НоваяСтрока.Представление 	= НСтр("ru = '<Не выбран>'");
			КонецЕсли;
			НоваяСтрока.ИндексКартинки		= 2;
			НоваяСтрока.ЭтоГруппа 			= Ложь;

		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
&Вместо("ЗаполнитьПанельГруппыЗаданий")
Процедура РСК_ЗаполнитьПанельГруппыЗаданий(Знач МассивСсылок = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.ГруппаЗадания КАК ГруппаЗадания,
		|	Задание.ГруппаЗадания КАК Представление,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(Задание.ПлановаяДлительность, 0)
		|		КОНЕЦ) КАК ЧасыПлан		
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И Задание.Ссылка В(&МассивСсылок)
		|
		|СГРУППИРОВАТЬ ПО
		|	Задание.ГруппаЗадания
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	ГруппаЗадания КАК ГруппаЗадания,
		|	Представление
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
	
	Запрос.УстановитьПараметр("МассивСсылок",	МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ГруппыЗаданий.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= ГруппыЗаданий.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Группа заданий'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа = Истина;
		СтрокиПервыйУровень = СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл
			
			НоваяСтрока					= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			Если ПустаяСтрока(НоваяСтрока.Представление) Тогда
				НоваяСтрока.Представление = НСтр("ru = '<Не выбран>'");
			КонецЕсли;
			НоваяСтрока.ИндексКартинки	= 2;
			НоваяСтрока.ЭтоГруппа = Ложь;

		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
&Вместо("ЗаполнитьПанельТипыПроцессов")
Процедура РСК_ЗаполнитьПанельТипыПроцессов(Знач МассивСсылок = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.ТипПроцесса КАК ТипПроцесса,
		|	ВЫБОР
		|		КОГДА Задание.ТипПроцесса <> ЗНАЧЕНИЕ(Справочник.ТипыПроцессов.ПустаяСсылка)
		|			ТОГДА Задание.ТипПроцесса
		|		ИНАЧЕ ""Не выбран""
		|	КОНЕЦ КАК Представление,
		|	ВЫБОР
		|		КОГДА Задание.ТипПроцесса = ЗНАЧЕНИЕ(Справочник.ТипыПроцессов.ПустаяСсылка)
		|				И НЕ Задание.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(Задание.ПлановаяДлительность, 0)
		|		КОНЕЦ) КАК ЧасыПлан				
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И Задание.Ссылка В(&МассивСсылок)		
		|
		|СГРУППИРОВАТЬ ПО
		|	Задание.ТипПроцесса,
		|	ВЫБОР
		|		КОГДА Задание.ТипПроцесса <> ЗНАЧЕНИЕ(Справочник.ТипыПроцессов.ПустаяСсылка)
		|			ТОГДА Задание.ТипПроцесса
		|		ИНАЧЕ ""Не выбран""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Задание.ТипПроцесса = ЗНАЧЕНИЕ(Справочник.ТипыПроцессов.ПустаяСсылка)
		|				И НЕ Задание.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Представление
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	ТипПроцесса
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава",	
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
	
	Запрос.УстановитьПараметр("МассивСсылок",	МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТипыПроцессов.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= ТипыПроцессов.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Типы документов'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа = Истина;
		СтрокиПервыйУровень = СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл
			
			НоваяСтрока					= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			НоваяСтрока.ИндексКартинки	= 2;
			НоваяСтрока.ЭтоГруппа = Ложь;

		КонецЦикла;
		
	КонецЦикла;

	
КонецПроцедуры
//--РС Консалт Вечканов Владимир 08.01.2021 № Задачи 125

&НаКлиенте
Процедура РСК_ПриОткрытииПосле(Отказ)
	Если Элементы.УстановитьВариантНавигацииПоКлиенту.Пометка = Истина Тогда
		РСК_УстановитьВариантНавигацииПоКлиентуПосле(Команды.Найти("УстановитьВариантНавигацииПоКлиенту"));
	КонецЕсли;	
КонецПроцедуры

&НаСервере
&Вместо("ОбновитьПанельНавигации")
Процедура РСК_ОбновитьПанельНавигации()
	
	МассивСсылок 					= ДинамическийСписокВТаблицуЗначений();
	ТекущаяСтраницаПанелиНавигации	= Элементы.СтраницыПанелиНавигации.ТекущаяСтраница;
	
	Если ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаИнициаторы Тогда
		ЗаполнитьПанельИнициаторов(МассивСсылок);
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаИсполнители Тогда
		ЗаполнитьПанельИсполнителей(МассивСсылок);
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаПриоритеты Тогда
		ЗаполнитьПанельПриоритетов(МассивСсылок);
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаПроцессы Тогда
		ЗаполнитьПанельПроцессов(МассивСсылок);
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаТипыПроцессов Тогда
		ЗаполнитьПанельТипыПроцессов(МассивСсылок);
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаГруппы Тогда
		ЗаполнитьПанельГруппыЗаданий(МассивСсылок);
	//++РС Консалт Вечканов Владимир 08.01.2021 № Задачи 127	
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаКлиенты Тогда
		ЗаполнитьПанельКлиенты(МассивСсылок);	
	//--РС Консалт Вечканов Владимир 08.01.2021 № Задачи 127	
	КонецЕсли;
	
КонецПроцедуры

//++РС Консалт: Полякова Е.Л. 04.02.2021 Задача №175
&НаКлиенте
Процедура РСК_СоздатьЗанятость(Команда)
	ВыделеннаяСтрока = Элементы.Список.ВыделенныеСтроки.Получить(0);
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДокументЗадания", ВыделеннаяСтрока);
 	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
 	ОткрытьФорму("Документ.РС_Занятость.Форма.ФормаДокументаБыстраяЗанятость", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РСК_ЗавершитьПоследнююЗанятость(Команда)
	ЗавершениеПоследнейЗанятости();
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПоследнейЗанятости()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РС_Занятость.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РС_Занятость КАК РС_Занятость
		|ГДЕ
		|	РС_Занятость.Проведен = ИСТИНА
		|	И РС_Занятость.Исполнитель = &Исполнитель
		|	И РС_Занятость.ДатаНачала >= &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	РС_Занятость.ДатаОкончания УБЫВ";
	Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.ТекущийПользователь); 
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет проведенных занятостей, начатых сегодня");	
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ПоследняяЗанятость = ВыборкаДетальныеЗаписи.Ссылка;
		Занятость = ПоследняяЗанятость.ПолучитьОбъект();
		Занятость.ДатаОкончания = НачалоМинуты(ТекущаяДата());
		ФактическоеВремя = Занятость.ДатаОкончания - Занятость.ДатаНачала;
		Занятость.ФактическаяТрудоемкость = ФактическоеВремя/3600;
		Если Занятость.СпособРасчетаВремениКлиента = 1 Тогда
			Занятость.ВремяКлиента = Занятость.ФактическаяТрудоемкость;
		ИначеЕсли Занятость.СпособРасчетаВремениКлиента = 3 Тогда
			Занятость.ВремяКлиента = 0;
		КонецЕсли;
		Занятость.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
КонецПроцедуры
//--РС Консалт: Полякова Е.Л. 04.02.2021 Задача №175

//++ РС Консалт: Тарасов Михаил 04.02.2021 Задача 443
//e1cib/data/Документ.Задание?ref=9854bf77bab981234918cc24e4396a90
&НаКлиенте
Процедура РСК_РС_СкопироватьКомментарийСоСсылкойПосле(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияКлиент.РС_КомментарийВБуферОбмена(Элементы.Список.ТекущиеДанные.Ссылка);
	
КонецПроцедуры
//-- КонецЗадачи 443

//++ РС Консалт: Полякова Елизавета 10.02.2021 Задача 2088
//e1cib/data/Документ.Задание?ref=b6793f6a8f1d788e4d5ae362ce7f36b6
&НаКлиенте
Процедура РСК_ОтборАвторОбработкаВыбораВместо(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Тип") Тогда
		СтандартнаяОбработка	= Ложь;
		Если ИмяТекущейПанелиНавигации = "СтраницаИнициаторы" Тогда
			УдалитьОтборПанельНавигации();
		КонецЕсли;	
		УстановитьОтборСписка("Автор", Элемент.Родитель.Имя, ВыбранноеЗначение);
		ВыбранноеЗначение = Неопределено;
	КонецЕсли;
	ОбновитьПанельНавигацииНаКлиенте();
КонецПроцедуры
//-- КонецЗадачи 2088  

//++ РС Консалт: Полякова Елизавета 20.02.2021 Задача 2109
//e1cib/data/Документ.Задание?ref=99ae48a6e71f81304c58fd0f857de675
&НаСервере
&Вместо("УстановитьОтборСпискаСтатусЗаданияНаСервере")
Процедура РСК_УстановитьОтборСпискаСтатусЗаданияНаСервере(Знач ВыбранноеЗначение, Знач СохранитьНастройки = Истина)	
	УдалитьЭлементыОтборовПоСтатусуЗадания(СохранитьНастройки);
	Если ВыбранноеЗначение = НСтр("ru = 'Новые'")
		ИЛИ ВыбранноеЗначение = НСтр("ru = 'ВРаботе'")
		ИЛИ ВыбранноеЗначение = НСтр("ru = 'НовыеВРаботе'") 
		ИЛИ ВыбранноеЗначение = НСтр("ru = 'Приостановлено'") Тогда
		ЗначениеОтбора		= Новый Массив;	
		Если ВыбранноеЗначение = НСтр("ru = 'Новые'") Тогда
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Новый);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Бэклог);	
		ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'ВРаботе'") 
			ИЛИ ВыбранноеЗначение = НСтр("ru = 'В работе'") Тогда
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подготовка);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.ВРаботе);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подпроцесс);
		ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'НовыеВРаботе'") Тогда
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Новый);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Бэклог);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подготовка);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.ВРаботе);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подпроцесс);	
		ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'Приостановлено'") Тогда
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Приостановка);		
		КонецЕсли;	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"СостояниеЭтапа", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,	, Истина);
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'Выполненные'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Выполнено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина)
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'Завершенные'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Завершено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);	
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'ВыполненныНоНеЗавершенные'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Выполнено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Завершено", Ложь, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'Просрочено'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Просрочено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);	
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'ПросроченоНовыеВРаботе'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Просрочено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		ЗначениеОтбора = Новый Массив;
		ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Новый);
		ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Бэклог);
		ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подготовка);
		ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.ВРаботе);
		ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подпроцесс);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"СостояниеЭтапа", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,	, Истина);
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'ПросроченоВыполненные'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Просрочено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Выполнено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'СрокСегодня'") Тогда
		мСтандартныйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
		ГруппаОтбораИ =	Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаНачала;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаОкончания;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'СрокЗавтра'") Тогда
		мСтандартныйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.Завтра);
		ГруппаОтбораИ =	Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаНачала;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаОкончания;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'СрокНеделя'") Тогда
		мСтандартныйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.Следующие7Дней);
		ГруппаОтбораИ =	Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаНачала;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаОкончания;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'ВыполненныеЗаНеделю'") Тогда
		мСтандартныйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.Последние7Дней);	
		ГруппаОтбораИ =	Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаНачала;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаОкончания;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Выполнено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'Измененные'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Изменено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);		
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'НеЗакрытыеРС'") Тогда
		ЗначениеОтбора = Новый Массив;
		ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Закрыт);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"СостояниеЭтапа", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.НеВСписке, , Истина);
		КонецЕсли;
	Если НЕ КонтекстноеОткрытие И СохранитьНастройки Тогда	
		СохранитьНастройкиОтборов();
	КонецЕсли;
КонецПроцедуры

//-- КонецЗадачи 2109


//++Задача №4476 Горохов Иван 21.05.2021
&НаСервереБезКонтекста
&Вместо("СписокПриПолученииДанныхНаСервере")
Процедура РСК_СписокПриПолученииДанныхНаСервереВместо(ИмяЭлемента, Настройки, Строки)
	// Пропускаем, пусто в списке.
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Пропускаем, столбец скрыт.
	Массив = Строки.ПолучитьКлючи();
	Если НЕ Строки.Получить(Массив[0]).Данные.Свойство("ОсталосьДоКрайнейДаты") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МИНУТА) >= -60
		|				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МИНУТА) <= 60
		|			ТОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МИНУТА)
		|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ЧАС) >= -24
		|				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ЧАС) <= 24
		|			ТОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ЧАС)
		|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ДЕНЬ) >= -31
		|				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ДЕНЬ) <= 31
        |			ТОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ДЕНЬ)
        |		ИНАЧЕ РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МЕСЯЦ)
        |	КОНЕЦ КАК Значение,
        |	ВЫБОР
        |		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МИНУТА) >= -60
        |				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МИНУТА) <= 60
        |			ТОГДА &Минут
        |		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ЧАС) >= -24
        |				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ЧАС) <= 24
        |			ТОГДА &Часов
        |		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ДЕНЬ) >= -31
        |				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ДЕНЬ) <= 31
        |			ТОГДА &Дней
        |		ИНАЧЕ &Месяц
        |	КОНЕЦ КАК ЕдиницаИзмерения
        |ИЗ
        |	Документ.Задание КАК Задание
        |ГДЕ
        |	Задание.Выполнено = ЛОЖЬ
        |	И Задание.КрайняяДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
        |	И Задание.Ссылка В(&МассивСсылок)";
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	Задание.Ссылка,
		//|	ВЫБОР
		//|		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МИНУТА) >= -60
		//|				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МИНУТА) <= 60
		//|			ТОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МИНУТА)
		//|		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ЧАС) >= -24
		//|				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ЧАС) <= 24
		//|			ТОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ЧАС)
		//|		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ДЕНЬ) >= -31
		//|				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ДЕНЬ) <= 31
		//|			ТОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ДЕНЬ)
		//|		ИНАЧЕ РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МЕСЯЦ)
		//|	КОНЕЦ,
		//|	ВЫБОР
		//|		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МИНУТА) >= -60
		//|				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МИНУТА) <= 60
		//|			ТОГДА &Минут
		//|		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ЧАС) >= -24
		//|				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ЧАС) <= 24
		//|			ТОГДА &Часов
		//|		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ДЕНЬ) >= -31
		//|				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ДЕНЬ) <= 31
		//|			ТОГДА &Дней
		//|		ИНАЧЕ &Месяц
		//|	КОНЕЦ
		//|ИЗ
		//|	Документ.Задание КАК Задание
		//|ГДЕ
		//|	Задание.Выполнено = ИСТИНА
		//|	И Задание.КрайняяДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|	И Задание.Ссылка В(&МассивСсылок)";
	
	мТекДата = ТекущаяДатаСеанса();
	
	Запрос.УстановитьПараметр("МассивСсылок",	Массив);
	Запрос.УстановитьПараметр("ТекущаяДата",	мТекДата);
	Запрос.УстановитьПараметр("Минут",			НСтр("ru = 'мин.'"));
	Запрос.УстановитьПараметр("Часов",			НСтр("ru = 'ч.'"));
	Запрос.УстановитьПараметр("Дней",			НСтр("ru = 'дн.'"));
	Запрос.УстановитьПараметр("Месяц",			НСтр("ru = 'мес.'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаСписка = Строки[Выборка.Ссылка];
		СтрокаСписка.Данные.ОсталосьДоКрайнейДаты = СтрШаблон(НСтр("ru = '%1 %2'"), 
				Выборка.Значение, 
				Выборка.ЕдиницаИзмерения);
				
	КонецЦикла;
КонецПроцедуры
//--Конец задачи №4476 