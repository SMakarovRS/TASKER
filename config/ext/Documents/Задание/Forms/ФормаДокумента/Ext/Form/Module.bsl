
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РСК_ПроектПриИзмененииПосле(Элемент)
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
	ОбновитьСвязанныеРеквизиты();
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121	
КонецПроцедуры

&НаКлиенте
Процедура РСК_КлиентПриИзмененииПосле(Элемент)
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
	ОбновитьСвязанныеРеквизиты();
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
	
	
	
	//
	//Если МассивКонтЛиц.Количество()>0 тогда
	//	Элементы.Инициатор.СписокВыбора.ЗагрузитьЗначения(МассивКонтЛиц);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РСК_ИнициаторПриИзмененииПосле(Элемент)
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
	ОбновитьСвязанныеРеквизиты();
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
КонецПроцедуры

&НаКлиенте
Процедура РСК_ИнициаторНачалоВыбораВместо(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Клиент) И ТипЗнч(Объект.Клиент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Владелец", Объект.Клиент);
		
		СтруктураПараметров.Вставить("Отбор", ПараметрыОтбора);
	КонецЕсли;
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаВыбора", СтруктураПараметров, Элемент);
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитовОбъектаНаСервереБезКонтекста(Объект, Реквизиты)
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, Реквизиты);
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПроектКлиентаНаСервереБезКонтекста(Клиент)
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Проект
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления
	|	И Проекты.Клиент = &Клиент");
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Проекты = Запрос.Выполнить().Выгрузить();
	
	Если Проекты.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Проекты[0].Проект;
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
КонецФункции

//++РС Консалт Петрова Мария 06.01.2020 [№ задачи 123]
&НаКлиенте
Процедура РСК_СоздатьЗанятостьПосле(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДокументЗадания", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
	
	ОткрытьФорму("Документ.РС_Занятость.Форма.ФормаДокументаБыстраяЗанятость", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

//--РС Консалт Петрова Мария 06.01.2020 [№ задачи 123]

&НаСервере
Процедура ОбновитьДоступностьРеквизитов()
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
	Элементы.Проект.ТолькоПросмотр = Не ЗначениеЗаполнено(Объект.Клиент);
	Элементы.Инициатор.ТолькоПросмотр = Элементы.Проект.ТолькоПросмотр Или Не ЗначениеЗаполнено(Объект.Проект);
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязанныеРеквизиты()
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		Если ЗначениеЗаполнено(Объект.Инициатор) И Объект.Клиент <> Объект.Инициатор.Владелец Тогда
			Объект.Инициатор = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Проект) И Объект.Клиент <> Объект.Проект.Клиент Тогда
			Объект.Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		КонецЕсли;
		//++РС Консал Горохов И. 06.12.22 Задача №22337
		Статус = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.найтиПоРеквизиту("Имя", "рсЗаблокировано");
		Статус = УправлениеСвойствами.ЗначениеСвойства(Объект.Клиент, Статус);
		Если Статус <> Неопределено тогда
			ЭтаФорма.Элементы.СтатусКлиента.Заголовок = "Заблокирован";
		Иначе
			ЭтаФорма.Элементы.СтатусКлиента.Заголовок = "";
		КонецЕсли;
		//-- КонецЗадачи №22337
	Иначе
		Если ЗначениеЗаполнено(Объект.Инициатор) Тогда
			Объект.Клиент = Объект.Инициатор.Владелец;
		КонецЕсли;
		//++
		ЭтаФорма.Элементы.СтатусКлиента.Заголовок = "";
		//--
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Контрагент";
		
		Запрос.УстановитьПараметр("Контрагент", Объект.Клиент);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество()=1 тогда
			ВыборкаДетальныеЗаписи.Следующий();
			Объект.Инициатор = ВыборкаДетальныеЗаписи.Ссылка;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Проект) Тогда
			ПроектКлиента = ПолучитьПроектКлиентаНаСервереБезКонтекста(Объект.Клиент);
			Если ПроектКлиента <> Неопределено Тогда
				Объект.Проект = ПроектКлиента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		РеквизитыПроекта = ПолучитьЗначениеРеквизитовОбъектаНаСервереБезКонтекста(Объект.Проект, "Инициатор, ОтветственныйЗаПроект");
		Если Не ЗначениеЗаполнено(Объект.ТекущийИсполнитель)
			И ЗначениеЗаполнено(РеквизитыПроекта.ОтветственныйЗаПроект) 
			И ТипЗнч(РеквизитыПроекта.ОтветственныйЗаПроект) = Тип("СправочникСсылка.Пользователи")
			И РеквизитыПроекта.ОтветственныйЗаПроект <> Объект.ТекущийИсполнитель Тогда
			
			Объект.ТекущийИсполнитель = РеквизитыПроекта.ОтветственныйЗаПроект;
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыПроекта.Инициатор)
			И Не ЗначениеЗаполнено(Объект.Инициатор) Тогда
			
			Объект.Инициатор = РеквизитыПроекта.Инициатор;
			Элементы.Клиент.ОграничениеТипа = ЗаданияСервер.ДопустимыеТипыКлиентаИнициатора(Объект.Инициатор);
			ЗаполнитьРольИнициатора();
		КонецЕсли;
	КонецЕсли;	
	
	ОбновитьДоступностьРеквизитов();
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
КонецПроцедуры

#КонецОбласти

//++РС Консалт Вечканов Владимир 08.01.2021 № Задачи 126
&НаКлиенте
Процедура РСК_ПриОткрытииПосле(Отказ)
	РСК_ПриОткрытииПослеНаСервере(Отказ);
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
	ОбновитьДоступностьРеквизитов();
	//++РС Консалт: Минаков А.С. 06.01.2020 Задача 121
	
	//++РС Консалт: Полякова Елизавета 16.02.2021
	Элементы.ПечатьБезЗанятостей.Видимость = Объект.ПоСогласованию;
	Элементы.СогласованоЧасов.Видимость = Объект.ПоСогласованию;
	//--КонецЗадачи
	//++ РС Консалт: Полякова Елизавета 09.03.2021 Задача 3431
	//e1cib/data/Документ.Задание?ref=bd11fab245c3b5344d51705fe44870c0
	Если Объект.Завершено = Ложь Тогда
		Элементы.ИзменитьДатуЗавершения.Видимость = Ложь;
	Иначе                    
		Элементы.ИзменитьДатуЗавершения.Видимость = Истина;
	КонецЕсли;
	//-- КонецЗадачи 3431
	//Трудозатраты.Параметры.УстановитьЗначениеПараметра("Пс", Символы.ПС);
	
	Если НЕ Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.Инициатор) Тогда
		ЗаполнитьРольИнициатора();	                         
	КонецЕсли;
	
КонецПроцедуры
//--РС Консалт Вечканов Владимир 08.01.2021 № Задачи 126

//++ РС Консалт: Полякова Елизавета 20.02.2021 Задача 2160
//e1cib/data/Документ.Задание?ref=8eb44746acb49f494b0842d5b6c4ad51
&НаСервере
Процедура РСК_ПриОткрытииПослеНаСервере(Отказ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РС_Занятость.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Занятости
	|ИЗ
	|	Документ.РС_Занятость КАК РС_Занятость
	|ГДЕ
	|	РС_Занятость.Задание = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(РС_РаботыОбороты.ФактическоеВремяОборот, 0)) КАК ФактическоеВремяОборот,
	|	СУММА(ЕСТЬNULL(РС_РаботыОбороты.ВремяКлиентаОборот, 0)) КАК ВремяКлиентаОборот
	|ИЗ
	|	РегистрНакопления.РС_Работы.Обороты КАК РС_РаботыОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Занятости КАК ВТ_Занятости
	|		ПО РС_РаботыОбороты.Занятость = ВТ_Занятости.Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект.ЧасыФакт = ВыборкаДетальныеЗаписи.ФактическоеВремяОборот;
		Объект.ЧасыПлатные = ВыборкаДетальныеЗаписи.ВремяКлиентаОборот;
	КонецЦикла;
	Если Не Параметры.Ключ.Пустая() Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задание.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПодчиненныеЗадания
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	Задание.Родитель = &Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РС_Занятость.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Занятости
		|ИЗ
		|	Документ.РС_Занятость КАК РС_Занятость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПодчиненныеЗадания КАК ВТ_ПодчиненныеЗадания
		|		ПО РС_Занятость.Задание = ВТ_ПодчиненныеЗадания.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(РС_РаботыОбороты.ФактическоеВремяОборот, 0)) КАК ФактическоеВремяОборот,
		|	СУММА(ЕСТЬNULL(РС_РаботыОбороты.ВремяКлиентаОборот, 0)) КАК ВремяКлиентаОборот
		|ИЗ
		|	РегистрНакопления.РС_Работы.Обороты КАК РС_РаботыОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Занятости КАК ВТ_Занятости
		|		ПО РС_РаботыОбороты.Занятость = ВТ_Занятости.Ссылка";
		Запрос.УстановитьПараметр("Родитель", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Объект.ЧасыФактПодзадач = ВыборкаДетальныеЗаписи.ФактическоеВремяОборот;
			Объект.ЧасыПлатныеПодзадач = ВыборкаДетальныеЗаписи.ВремяКлиентаОборот;
		КонецЦикла;
		Если Объект.ЧасыФактПодзадач = NULL Тогда
			Объект.ЧасыФактПодзадач = Объект.ЧасыФакт;
		Иначе
			Объект.ЧасыФактПодзадач = Объект.ЧасыФактПодзадач + Объект.ЧасыФакт;
		КонецЕсли;
		Если Объект.ЧасыПлатныеПодзадач = NULL Тогда
			Объект.ЧасыПлатныеПодзадач = Объект.ЧасыПлатные;
		Иначе
			Объект.ЧасыПлатныеПодзадач = Объект.ЧасыПлатныеПодзадач + Объект.ЧасыПлатные;
		КонецЕсли;
	КонецЕсли;
	//++ Горохов И. 14.07.21 Задача №8338
	ЗаполнитьСписокВыбораДопРекв();
	//-- КонецЗадачи №8338
КонецПроцедуры
//-- КонецЗадачи 2160

//++ Горохов И. 14.07.21 Задача №8338
&НаСервере
Процедура ЗаполнитьСписокВыбораДопРекв()
	
	ДопРек = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Основной телефон для связи");
	ДопРеквизитЭлемент = Неопределено;
	
	Для Каждого Элем из ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов цикл
		Если Элем.Свойство = ДопРек тогда
			ДопРеквизитЭлемент = ЭтаФорма.Элементы.Найти(Элем.ИмяРеквизитаЗначение);
			ДопРеквизитЭлемент = ЭтаФорма.Элементы.Найти(ДопРеквизитЭлемент.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ДопРеквизитЭлемент = Неопределено тогда
		СписокТелефонов = СформироватьСписокТелефонов();
		Если НЕ ЗначениеЗаполнено(СписокТелефонов) тогда
			Возврат;	
		КонецЕсли;
		
		ДопРеквизитЭлемент.СписокВыбора.Очистить();
		Для каждого Телефон из СписокТелефонов Цикл
			ДопРеквизитЭлемент.СписокВыбора.Добавить(Телефон.Значение, Телефон.Представление);		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
//-- КонецЗадачи №8338

&НаКлиенте
&Вместо("ПеревестиНаЭтап")
Процедура РСК_ПеревестиНаЭтап(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать задание.'"));
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ТекПользователь = Неопределено;
	Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ТекПользователь) Тогда
		ПоказатьПредупреждение(,
		СтрШаблон(НСтр("ru = 'Исполнителем по данному заданию является %1.
		|Сменить этап имеет право только он сам или его руководители.'"),
		ТекПользователь),
		180,
		НСтр("ru = 'Нельзя сменить этап задания'"));
		Возврат;
	КонецЕсли;
	
	// Проверка, что текущий этап подпроцесс и он не выполнен.
	ЗаданиеСтруктура = Новый Структура;
	ЗаданиеСтруктура.Вставить("ТекущийЭтап", Объект.ТекущийЭтап);
	ЗаданиеСтруктура.Вставить("Ссылка", 	 Объект.Ссылка);
	Если НЕ ЗаданияСервер.ВыполненПодпроцесс(ЗаданиеСтруктура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Текущий этап - подпроцесс. 
		|Для его выполнения необходимо запустить и выполнить подпроцесс (кнопка с синим треугольником на форме).
		|После этого можно перейти на другой этап.'"));
		Возврат;
	КонецЕсли;
	
	СтруктураЭтапа		= ЗаданияСервер.ПолучитьСтруктуруЭтапаПоИмениКоманды(Команда.Имя);
	Если СтруктураЭтапа = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Этап не найден'"));
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = ЗначенияРеквизитовЗадания();
	СтруктураРеквизитов.Вставить("Источник",       УникальныйИдентификатор);
	СтруктураРеквизитов.Вставить("НовыйЭтап",      СтруктураЭтапа.Этап);
	СтруктураРеквизитов.Вставить("ПереданаСсылка", Ложь);
	СтруктураРеквизитов.Вставить("ЗаписатьОбъект", Ложь);
	Результат 			= ЗаданияКлиент.ПеревестиЗаданиеНаЭтап(Объект, СтруктураРеквизитов);
	Если Не Результат.ВыполненПеревод Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЭтапЗакрыт Тогда
		ЗакрытьОснованияЗадания(Объект.Ссылка, Результат);
	КонецЕсли;
	
	Объект.Выполнено = (ПолучитьРеквизитЭтапа(СтруктураЭтапа.Этап, "СостояниеЭтапа") 
	= ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцесса.Выполнен"))
	ИЛИ	(ПолучитьРеквизитЭтапа(СтруктураЭтапа.Этап, "СостояниеЭтапа") 
	= ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцесса.Закрыт"));
	
	Если НЕ Объект.Выполнено Тогда
		Объект.Завершено    = Ложь;
	КонецЕсли;
	
	// Обновляем все на форме.
	ОбновитьПереводНаЭтапы();
	ОбновитьДоступностьРедактирования();
	Модифицированность = Истина;
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

//Пашков
&НаКлиенте
Процедура ЗакрытьОснованияЗадания(ДокументЗадание, Параметры) 
	
	Основания = ЗаданияСервер.ПолучитьСписокОснований(ДокументЗадание);
	
	Для каждого Основание Из Основания Цикл
		
		ЭтоТикет = ЭтоТикет(Основание);
		Если НЕ ЭтоТикет Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПодчиненныхЗаданий = ЗаданияСервер.ЕстьНезакрытыеПодчиненныеЗадания(Основание, ДокументЗадание);
		Если СтруктураПодчиненныхЗаданий.ЕстьНезакрытыеПодчиненныеЗадания Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаданияСервер.СовпадаетИсполнитель(ДокументЗадание, Основание) Тогда
			
			ТекстВопроса = "Для " + Строка(Основание) + " закрыты все подчиненные задания. Закрыть тикет?";
			ПараметрыВопроса = Новый Структура;
			ПараметрыВопроса.Вставить("Основание", Основание);
			ПараметрыВопроса.Вставить("Результат", Параметры);
			Оповещение_ПослеЗакрытияВопроса = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_ЗакрытиеТикета", ЭтотОбъект, ПараметрыВопроса);
			Режим = РежимДиалогаВопрос.ДаНет;
			
			ПоказатьВопрос(Оповещение_ПослеЗакрытияВопроса, ТекстВопроса, Режим);
			
		Иначе
			
			Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцесса.Выполнен");
			Этап = ЗаданияСервер.ПолучитьЭтапПроцессаПоСостоянию(Основание, Состояние);
			
			Если Этап = Неопределено Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Не удалось найти закрывающий этап для процесса задания %1'"), Строка(Основание)));
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НовыйЭтап", 			Этап);
			СтруктураПараметров.Вставить("ПереданаСсылка", 		Истина);
			СтруктураПараметров.Вставить("ЗаписатьОбъект", 		Истина);
			СтруктураПараметров.Вставить("ФормаПереводаНаЭтап", Ложь);
			Результат = ЗаданияКлиент.ПеревестиЗаданиеНаЭтап(Основание, СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоТикет(Основание)
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.Задание") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Процесс = Основание.Процесс;
	ТипПроцесса = Процесс.ТипПроцесса;
	
	Возврат ТипПроцесса = Справочники.ТипыПроцессов.Инцидент;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса_ЗакрытиеТикета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать задание.'"));
			Возврат;
		КонецЕсли;
		
		СсылкаНаОбъект = ДополнительныеПараметры.Основание;
		
		Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцесса.Закрыт");
		Этап = ЗаданияСервер.ПолучитьЭтапПроцессаПоСостоянию(СсылкаНаОбъект, Состояние);
		
		Если Этап = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Не удалось найти закрывающий этап для процесса задания %1'"), Строка(СсылкаНаОбъект)));
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НовыйЭтап", 			Этап);
		СтруктураПараметров.Вставить("ПереданаСсылка", 		Истина);
		СтруктураПараметров.Вставить("ЗаписатьОбъект", 		Истина);
		СтруктураПараметров.Вставить("ФормаПереводаНаЭтап", Ложь);
		Результат = ЗаданияКлиент.ПеревестиЗаданиеНаЭтап(СсылкаНаОбъект, СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("ПеревестиНаЭтапФормаЗавершение")
Процедура РСК_ПеревестиНаЭтапФормаЗавершение(Результат, ДополнительныеПараметры)
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("НовыйЭтап") Тогда
			Объект.ТекущийЭтап = Результат.НовыйЭтап;
		КонецЕсли;
		
		Если Результат.Свойство("ИсполнительПоУмолчанию") И ЗначениеЗаполнено(Результат.ИсполнительПоУмолчанию) Тогда
			Объект.ТекущийИсполнитель = Результат.ИсполнительПоУмолчанию;
		КонецЕсли;
		
		ОбновитьПереводНаЭтапы();
		ОбновитьДоступностьРедактирования();
		ВывестиКомментарии();
		Модифицированность = Истина;
		РассчитатьОбщийВесЗадания();
		
		//Пашков
		НужноЗакрытьОснование = Ложь;
		Если Результат.Свойство("НужноЗакрытьОснование", НужноЗакрытьОснование) И НужноЗакрытьОснование Тогда
			ЗакрытьОснование(Результат);
		КонецЕсли;
		
		НужноУстановитьСтатусВыполнен = Ложь;
		Если Результат.Свойство("НужноУстановитьСтатусВыполнен", НужноУстановитьСтатусВыполнен) И НужноУстановитьСтатусВыполнен Тогда
			УстановитьСтатусВыполнен(Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОснование(Результат)
	
	СсылкаНаОбъект = Неопределено;
	СтруктураПараметров = Неопределено;
	
	Если Не Результат.Свойство("СсылкаНаОбъект", СсылкаНаОбъект)
		ИЛИ Не Результат.Свойство("СтруктураПараметров", СтруктураПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать задание.'"));
		Возврат;
	КонецЕсли;
	
	РезультатПеревода = ЗаданияКлиент.ПеревестиЗаданиеНаЭтап(СсылкаНаОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыполнен(Результат)
	
	Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать задание.'"));
		Возврат;
	КонецЕсли;
	
	Основание = Результат.Основание;
	
	Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцесса.Выполнен");
	Этап = ЗаданияСервер.ПолучитьЭтапПроцессаПоСостоянию(Основание, Состояние);
	
	Если Этап = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
		НСтр("ru = 'Не удалось найти закрывающий этап для процесса задания %1'"), Строка(Основание)));
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НовыйЭтап", 			Этап);
	СтруктураПараметров.Вставить("ПереданаСсылка", 		Истина);
	СтруктураПараметров.Вставить("ЗаписатьОбъект", 		Истина);
	СтруктураПараметров.Вставить("ФормаПереводаНаЭтап", Ложь);
	СтруктураПараметров.Вставить("ПроверятьПодчиненныеЗадания", Ложь);
	
	Результат = ЗаданияКлиент.ПеревестиЗаданиеНаЭтап(Основание, СтруктураПараметров);
	
КонецПроцедуры

//++РС Консалт: Полякова Е.Л. 02.02.2021 Задача №525
&НаКлиенте
Процедура РСК_КлиентНачалоВыбораВместо(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТипСтр = "СправочникСсылка.Контрагенты";
	Элемент.ОграничениеТипа = Новый ОписаниеТипов(ТипСтр);
	Значение = Объект.Клиент;
	Объект.Клиент = Элемент.ОграничениеТипа.ПривестиЗначение(Значение);
	Элемент.ВыбиратьТип = Ложь;
КонецПроцедуры
//--РС Консалт: Полякова Е.Л. 02.02.2021 Задача №525

&НаСервере
&После("ОбновитьВидимость")
Процедура РСК_ОбновитьВидимость()
	// Вставить содержимое метода.
	//++ РС Консалт, Макаров Сергей Александрович 09.02.2021 17:55:54  бн
	Элементы.ДатаЗавершения.Видимость 			= истина;//Объект.ДатаЗавершения <> Дата(1, 1, 1) И Объект.Завершено = Истина;
	Элементы.ДатаВыполнения.Видимость 			= истина;//Объект.ДатаВыполнения <> Дата(1, 1, 1) И Объект.Выполнено = Истина;
	
	Элементы.ДатаЗавершения.Доступность 			= истина;//Объект.ДатаЗавершения <> Дата(1, 1, 1) И Объект.Завершено = Истина;
	Элементы.ДатаВыполнения.Доступность 	= истина;//Объект.ДатаВыполнения <> Дата(1, 1, 1) И Объект.Выполнено = Истина;
	
	//}--РС Консалт Макаров Сергей Александрович 09.02.2021 17:55:57
КонецПроцедуры

//++РС Консалт: Полякова Елизавета 16.02.2021
&НаКлиенте
Процедура РСК_ПоСогласованиюПриИзмененииПосле(Элемент)
	Элементы.ПечатьБезЗанятостей.Видимость = Объект.ПоСогласованию;
	Элементы.СогласованоЧасов.Видимость = Объект.ПоСогласованию;
	Если Не Объект.ПоСогласованию Тогда
		Объект.ПечатьБезЗанятостей = Ложь;
		Объект.СогласованоЧасов = 0;
	КонецЕсли;
КонецПроцедуры
//--КонецЗадачи

//++ РС Консалт: Полякова Елизавета 09.03.2021 Задача 3431
//e1cib/data/Документ.Задание?ref=bd11fab245c3b5344d51705fe44870c0
&НаКлиенте
Процедура РСК_ИзменитьДатуЗавершенияПосле(Команда)
	ЭтаФорма.ТолькоПросмотр = Ложь;
	Элементы.Страницы.ТолькоПросмотр = Истина;
	Элементы.ФормаЗаписатьИзФормы.Доступность = Истина;
	Элементы.ДатаЗавершения.Доступность = Истина;	
КонецПроцедуры
//-- КонецЗадачи 3431

//++ Горохов И. 14.07.21 Задача №8338 
&НаКлиенте
Процедура РСК_ОткрытьФормуТелефонаВместо(Команда)
	
	СписокТелефонов = СформироватьСписокТелефонов();
		
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОткрытьСписокТелефоновЗавершение", ЭтаФорма), СписокТелефонов, 
	Элементы[Команда.Имя]);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОсновнойТелефон()
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаданиеДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.Задание.ДополнительныеРеквизиты КАК ЗаданиеДополнительныеРеквизиты
	|ГДЕ
	|	ЗаданиеДополнительныеРеквизиты.Ссылка = &Ссылка
	|	И ЗаданиеДополнительныеРеквизиты.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Основной телефон для связи"));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ТабЗнч = Запрос.Выполнить().Выгрузить();
	Если ТабЗнч.Количество()>0 тогда
		Возврат ТабЗнч[0].Значение;
	Иначе 
		Возврат "";
	КонецЕсли;
КонецФункции

&НаСервере
Функция СформироватьСписокТелефонов()
	Инициатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Инициатор, "КонтактнаяИнформация");
	Если ЗначениеЗаполнено(Инициатор) тогда
	ТаблицаКИ = Инициатор.Выгрузить();
	ОсновнойТелефон = ПолучитьОсновнойТелефон(); 
	СписокТелефонов = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ОсновнойТелефон) тогда
		СписокТелефонов.Добавить(ОсновнойТелефон);		
	КонецЕсли;
	Если ТаблицаКИ.Количество() <>0 тогда
		Для каждого Запись из ТаблицаКИ цикл
			Если Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И ЗначениеЗаполнено(Запись.Представление) тогда
				Если СписокТелефонов.НайтиПоЗначению(Запись.НомерТелефона) = Неопределено тогда
					СписокТелефонов.Добавить(Запись.НомерТелефона, Запись.Представление);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	Если СписокТелефонов.Количество()=0 тогда
		СписокТелефонов.Добавить("ОтсутствуетКИ", НСтр("ru = 'Пусто'"));		
	КонецЕсли;
	Возврат СписокТелефонов;	
	КонецЕсли;
	Возврат "";
КонецФункции

&НаКлиенте
Процедура ОткрытьСписокТелефоновЗавершение(Результат, Доп) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Место хранения.
	Если Результат.Значение = "ОтсутствуетКИ" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "У контактного лица отсутствует телефоны!";
		Сообщение.Поле = "ОткрытьФормуТелефона";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();	
	Иначе
		ПользовательАТС = ПолучитьПользователяАТС();
		Если значениеЗаполнено(ПользовательАТС) тогда
			Номер = Результат.Значение;
			РС_ТелефонияКлиент.ПослеВыбораПользователяАТС(ПользовательАТС,Номер);
		Иначе
			ОткрытьФорму("ОбщаяФорма.РС_ФормаВыбораПользователяАТС", Новый Структура("НабираемыйНомер", Результат.Значение), ЭтотОбъект,,,, Новый ОписаниеОповещения("ПослеВыбораПользователяАТС", РС_ТелефонияКлиент, Результат.Значение), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПользователяАТС()
	Соединение = Новый HTTPСоединение("vpbx381206422.domru.biz",443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	Запрос = Новый HTTPЗапрос("/sys/crm_api.wcgp?cmd=accounts&token=" + Константы.РС_ТокенОблачнойАТС.Получить());
	ВнутреннийНомер = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеНастройки("РС_ВнутреннийНомер");
	Попытка
		Результат = Соединение.Получить(Запрос);
	Исключение
		Сообщить("Ошибка подключения к серверу ДОМ.ру для установления логина пользователя АТС");
		Возврат "@vpbx381206422.domru.biz";
	КонецПопытки;
	Если Не ЗначениеЗаполнено(Результат.ПолучитьТелоКакСтроку()) Тогда
		Возврат "@vpbx381206422.domru.biz";
	КонецЕсли;
	СтрокаJSON = Результат.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	ЧтениеJSON.Прочитать();
	ДОМруПользователь = "@vpbx381206422.domru.biz";
	//Перебор полученного списка и поиск пользователя, соответствующего внутреннему номеру, указанному в настройках пользователя
	Пока ЧтениеJSON.Прочитать() Цикл
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			Прервать;
		КонецЕсли;
		ЧтениеJSON.Прочитать();
		Номер = "";
		Ник = "";
		Пока Номер = "" ИЛИ Ник = "" Цикл
			Если ЧтениеJSON.ТекущееЗначение = "name" Тогда
				ЧтениеJSON.Прочитать();	
				Ник = ЧтениеJSON.ТекущееЗначение;
			ИначеЕсли ЧтениеJSON.ТекущееЗначение = "ext" Тогда
				ЧтениеJSON.Прочитать();	
				Номер = ЧтениеJSON.ТекущееЗначение;
			Иначе
				ЧтениеJSON.Прочитать();
			КонецЕсли;	
			ЧтениеJSON.Прочитать();
		КонецЦикла;
		
		Если Номер = ВнутреннийНомер Тогда
			ДОМруПользователь = Ник + ДОМруПользователь;
			Возврат ДОМруПользователь;
		КонецЕсли;
		
		Пока ЧтениеJSON.ТипТекущегоЗначения <> ТипЗначенияJSON.КонецОбъекта Цикл
			ЧтениеJSON.Прочитать();
		КонецЦикла;
	КонецЦикла;
	Возврат "";
КонецФункции

//-- КонецЗадачи №8338


&НаКлиенте
Процедура РСК_КлиентАвтоПодборПосле(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПараметрыПолученияДанных.Отбор.Вставить("ПометкаУдаления", Ложь);
	ПараметрыПолученияДанных.СпособПоискаСтроки = СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть;	
КонецПроцедуры

//++

&НаКлиенте
Процедура РСК_ИнициаторАвтоПодборВместо(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ОбработкаДанныхВыбора(Текст,ДанныеВыбора, Объект.Клиент);
	СтандартнаяОбработка = ложь;
	//ПолучитьКонтактныеЛица(Объект.Клиент, Текст);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаДанныхВыбора(Текст,ДанныеВыбора, Клиент)
	ПараметрыПодбора=Новый Структура;
	ПараметрыПодбора.Вставить("Отбор",Новый Структура("Владелец", Клиент));
	ПараметрыПодбора.Вставить("СтрокаПоиска",Текст);
	ПараметрыПодбора.Вставить("ВыборГруппИЭлементов",ИспользованиеГруппИЭлементов.Элементы);
	ДанныеВыбора=Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыПодбора);
КонецПроцедуры

&НаКлиенте
&После("ИнициаторОбработкаВыбора")
Процедура РСК_ИнициаторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьСписокВыбораДопРекв();
КонецПроцедуры

//++ Горохов И. 18.03.22 Задача №15603
&НаСервере
Процедура ЗаполнитьРольИнициатора()
	Если Объект.Инициатор.РолиКонтактногоЛица.Количество()>0 тогда
		РольКонтактногоЛица = Объект.Инициатор.РолиКонтактногоЛица[0].РольКонтактногоЛица;
	Иначе
		ЭтотОбъект.РольКонтактногоЛица = Справочники.РолиКонтактныхЛиц.ПустаяСсылка();	
	КонецЕсли;	
КонецПроцедуры
//-- КонецЗадачи №15603

&НаКлиенте
Процедура РСК_ПроектСозданиеВместо(Элемент, СтандартнаяОбработка)
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Клиент", Объект.Клиент);
	ПараметрыФормы.Вставить("Родитель", Объект.Ссылка);
	ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

//--

&НаСервере
Функция ПроверитьЧекЛист()
	Если НЕ Объект.ТекущийЭтап = Справочники.ЭтапыПроцессов.Новый 
		И НЕ Объект.ТекущийЭтап = Справочники.ЭтапыПроцессов.НайтиПоКоду("000000020") //ПринятоЗаказчиком
		И НЕ Объект.ТекущийЭтап = Справочники.ЭтапыПроцессов.Отказано
		И НЕ Объект.ТекущийЭтап = Справочники.ЭтапыПроцессов.Отменено тогда
		Если Объект.ТекущийЭтап = Справочники.ЭтапыПроцессов.Выполнено тогда
			Если Объект.ЧекЛист.Количество() = 0 тогда
				Возврат 1;	
			КонецЕсли;
			Для каждого Подзадача из Объект.ЧекЛист цикл
				Если НЕ Подзадача.Выполнено тогда
					Возврат 0;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Объект.ЧекЛист.Количество() = 0 тогда
				Возврат 1;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	Возврат 2;
КонецФункции

&НаКлиенте
Процедура РСК_ЗаполнитьПоШаблонуВместо(Команда)
	
	//ПараметрыВыб = Новый Структура;
	//ПараметрыВыб.Вставить("РежимВыбора",Истина);
	//ПараметрыВыб.Вставить("МножественныйВыбор",Истина);
	//
	//ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбора", ЭтаФорма);
	//
	//ОткрытьФорму("Справочник.ШаблоныПроверокЧекЛист.Форма.ФормаВыбора",ПараметрыВыб,
	//        ЭтаФорма, , , , ОбработкаВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт

	Если Значение = Неопределено Тогда  
		Возврат;
    КонецЕсли;
	
	ЗаполнитьТаблицуЧекЛистов(Значение);
    
КонецПроцедуры

Процедура ЗаполнитьТаблицуЧекЛистов(МассивШаблонов)
	ДатаЧЛ = ТекущаяДата();
	ТекПользователь = Пользователи.ТекущийПользователь();
	Объект.ЧекЛист.Очистить();
	Для каждого шаблон из МассивШаблонов цикл
		Для каждого ЗаписьТЧ из шаблон.Подзадачи цикл
			НовСтр =Объект.ЧекЛист.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ЗаписьТЧ);
			НовСтр.Выполнено = Ложь;
			НовСтр.Дата = ДатаЧЛ;
			НовСтр.Автор = ТекПользователь;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РСК_ПередЗаписьюПеред(Отказ, ПараметрыЗаписи)
	//	Флаг = ПроверитьЧекЛист();
	//Если Флаг = 0 тогда
	//	ПоказатьПредупреждение(, "Не все подзадачи из чек-листа выполнены",, "Пропущена подзадача!");
	//	Отказ = Истина;
	//ИначеЕсли Флаг = 1 тогда
	//	ПоказатьПредупреждение(, "Список чек-листа пуст",, "Не заполнен чек-лист!");
	//	Отказ = Истина;		
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РСК_ИнициаторОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьРольИнициатора();
КонецПроцедуры
