
&Вместо("УсловияПравилаСобытий")
Функция РСК_УсловияПравилаСобытий()
	СоответствиеИзменениеОбъекта = Новый Соответствие;
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеКлючевыхРеквизитов",  
		НСтр("ru = 'Изменение ключевых реквизитов'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаДобавлениеОбычногоКомментария", 
		НСтр("ru = 'Добавление обычного комментария'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаДобавлениеПриватногоКомментария", 
		НСтр("ru = 'Добавление приватного комментария'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеКлиента",		  	  
		НСтр("ru = 'Изменение клиента'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеИнициатора",  		  
		НСтр("ru = 'Изменение инициатора'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеИсполнителя", 		  
		НСтр("ru = 'Изменение исполнителя'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеЭтапа", 		 		  
		НСтр("ru = 'Изменение этапа (задание не выполнено)'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеВЧекЛисте",	 		  
		НСтр("ru = 'Изменение в чек-листе'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаВыполнение",	 		 		  
		НСтр("ru = 'Выполнение'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаЗавершение",	 		 		  
		НСтр("ru = 'Завершение'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеОценки",		 		  
		НСтр("ru = 'Изменение оценки'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеОписания",	          
		НСтр("ru = 'Изменение описания'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеКрайнейДатыЗавершения",
		НСтр("ru = 'Изменение крайней даты завершения'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаСозданиеЗадания",				  
		НСтр("ru = 'Создание задания'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеНаблюдателей",		  
		НСтр("ru = 'Изменение наблюдателей'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеПроекта",		  	  
		НСтр("ru = 'Изменение проекта'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеСервиса",
		НСтр("ru = 'Изменение сервиса'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеУслуги",
		НСтр("ru = 'Изменение услуги'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеКатегории",
		НСтр("ru = 'Изменение категории'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеПриоритета",		  	  
		НСтр("ru = 'Изменение приоритета'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаЗаписьДокумента",		  	  	  
		НСтр("ru = 'Запись документа'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеЭтапаВыполненоЗавершено",		  	  	  
		НСтр("ru = 'Изменени статуса задания'"));
	
	Если УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьКанбан") Тогда
		
		СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаОчисткаСпринта",   
			НСтр("ru = 'Очистка спринта'"));
			
		СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаУстановкаСпринта", 
			НСтр("ru = 'Установка спринта'"));
			
	КонецЕсли;
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	СоответствиеПериодическоеСобытие.Вставить("ЗаданиеПериодическоеСобытиеПриближениеКрайнейДатыВыполнения", 
        НСтр("ru = 'Приближение крайней даты выполнения'"));	
    СоответствиеПериодическоеСобытие.Вставить("ЗаданиеПериодическоеСобытиеПриближениеКрайнейДатыРеакции", 
        НСтр("ru = 'Приближение крайней даты реакции'"));	
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ЗаданиеРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
КонецФункции

&Вместо("ПроверкаУсловияПравилаСобытия")
Функция РСК_ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник)
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ПравилоСобытия.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта Тогда 
		
		Если Структура.ЭтоНовый Тогда
			
			Если ИмяСобытия = "ЗаданиеИзменениеОбъектаСозданиеЗадания" Тогда
				Возврат Истина;
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаЗаписьДокумента" Тогда
				Возврат Истина;
			КонецЕсли;		
			
		Иначе		
			ИсточникПередЗаписью 	= Структура.ИсточникПередЗаписью;
			
			Если ИмяСобытия = "ЗаданиеИзменениеОбъектаЗаписьДокумента" Тогда
				
				Возврат Истина;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеИсполнителя" Тогда
				
				Если Источник.ТекущийИсполнитель <> ИсточникПередЗаписью.ТекущийИсполнитель Тогда
					Возврат Истина;
				КонецЕсли;	
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеЭтапа" Тогда
				
				Если Источник.Выполнено = Ложь
					И Источник.ТекущийЭтап <> ИсточникПередЗаписью.ТекущийЭтап Тогда
					Возврат Истина;
				КонецЕсли;
								
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеИнициатора" Тогда
				
				Если Источник.Инициатор <> ИсточникПередЗаписью.Инициатор Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаВыполнение" Тогда	
				
				Если Источник.Выполнено = Истина
					И Источник.Выполнено <> ИсточникПередЗаписью.Выполнено Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаЗавершение" Тогда		
				
				Если Источник.Завершено = Истина И Источник.ДатаЗавершения <> Дата(1,1,1)
					И Источник.Завершено <> ИсточникПередЗаписью.Завершено Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеОценки" Тогда
				
				Если Источник.ОценкаВыполнения <> ИсточникПередЗаписью.ОценкаВыполнения Тогда
					Возврат Истина;
				КонецЕсли;
								
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеКлючевыхРеквизитов" Тогда 				
				Если Источник.Инициатор <> ИсточникПередЗаписью.Инициатор 
					ИЛИ Источник.Клиент <> ИсточникПередЗаписью.Клиент
					ИЛИ Источник.ТекущийИсполнитель <> ИсточникПередЗаписью.ТекущийИсполнитель
					ИЛИ Источник.ТекущийЭтап <> ИсточникПередЗаписью.ТекущийЭтап
					ИЛИ Источник.Выполнено <> ИсточникПередЗаписью.Выполнено
					ИЛИ Источник.ДатаВыполнения <> ИсточникПередЗаписью.ДатаВыполнения
					ИЛИ Источник.ДатаЗавершения <> ИсточникПередЗаписью.ДатаЗавершения
					ИЛИ Источник.ОценкаВыполнения <> ИсточникПередЗаписью.ОценкаВыполнения
					ИЛИ Источник.Сервис <> ИсточникПередЗаписью.Сервис
					ИЛИ Источник.Услуга <> ИсточникПередЗаписью.Услуга
					ИЛИ Источник.Описание <> ИсточникПередЗаписью.Описание
					ИЛИ Источник.КрайняяДатаВыполнения <> ИсточникПередЗаписью.КрайняяДатаВыполнения
			        ИЛИ Источник.Спринт <> ИсточникПередЗаписью.Спринт
					ИЛИ Источник.Проект <> ИсточникПередЗаписью.Проект
					ИЛИ ЕстьИзменениеВЧекЛисте(Источник, ИсточникПередЗаписью) Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеСервиса" Тогда
				
				Если Источник.Сервис <> ИсточникПередЗаписью.Сервис Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеУслуги" Тогда
				
				Если Источник.Услуга <> ИсточникПередЗаписью.Услуга Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеЭтапаВыполненоЗавершено" Тогда
				
				Если Источник.Завершено И НЕ ИсточникПередЗаписью.Завершено Тогда
					Возврат Истина;
				КонецЕсли;
				
				Если Источник.Выполнено И НЕ ИсточникПередЗаписью.Выполнено Тогда
					Возврат Истина;
				КонецЕсли;
				
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеКатегории" Тогда
				
				Если Источник.Категория <> ИсточникПередЗаписью.Категория Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеКлиента" Тогда
				
				Если Источник.Клиент <> ИсточникПередЗаписью.Клиент Тогда
					Возврат Истина;
				КонецЕсли;
								
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеПриоритета" Тогда
				
				Если Источник.Приоритет <> ИсточникПередЗаписью.Приоритет Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеПроекта" Тогда
				
				Если Источник.Проект <> ИсточникПередЗаписью.Проект Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеВЧекЛисте" Тогда
				
				Возврат ЕстьИзменениеВЧекЛисте(Источник, ИсточникПередЗаписью);
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеОписания" Тогда
				
				Если Источник.Описание <> ИсточникПередЗаписью.Описание Тогда
					Возврат Истина;
				КонецЕсли;			
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеКрайнейДатыЗавершения" Тогда	
				
				Если Источник.КрайняяДатаВыполнения <> ИсточникПередЗаписью.КрайняяДатаВыполнения Тогда
					Возврат Истина;
				КонецЕсли;
				
            ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаОчисткаСпринта" 
                И УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьКанбан") Тогда	
				
				Если Источник.Спринт <> ИсточникПередЗаписью.Спринт 
					И Источник.Спринт = Справочники.Спринты.ПустаяСсылка() Тогда
					Возврат Истина;
				КонецЕсли;
				
            ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаУстановкаСпринта" 
                И УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьКанбан") Тогда	
				
				Если Источник.Спринт <> Справочники.Спринты.ПустаяСсылка()
					И Источник.Спринт <> ИсточникПередЗаписью.Спринт Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеНаблюдателей" Тогда
				
				Возврат ЕстьИзменениеВНаблюдателях(Источник, ИсточникПередЗаписью);	
	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	ИначеЕсли ПравилоСобытия.ТипПравила = Перечисления.ТипыПравилСобытий.ПериодическоеСобытие Тогда 
		
		ДатаНачалаПроверки   = Структура.ДатаНачалаПроверки;
		ДатаОкончанияПроверки= Структура.ДатаОкончанияПроверки;			
		Запрос 		 		 = Новый Запрос;
		
		Если ИмяСобытия = "ЗаданиеПериодическоеСобытиеПриближениеКрайнейДатыВыполнения" Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Задание.Ссылка
				|ИЗ
				|	Документ.Задание КАК Задание
				|ГДЕ
				|	НЕ Задание.ПометкаУдаления
				|	И Задание.КрайняяДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1)
				|	И НЕ Задание.Завершено
				|	И &ДатаНачала <= ДОБАВИТЬКДАТЕ(Задание.КрайняяДатаВыполнения, ЧАС, -&ВремяДоОповещения)
				|	И ДОБАВИТЬКДАТЕ(Задание.КрайняяДатаВыполнения, ЧАС, -&ВремяДоОповещения) < &ДатаОкончания";
				
		ИначеЕсли ИмяСобытия = "ЗаданиеПериодическоеСобытиеПриближениеКрайнейДатыРеакции" Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Задание.Ссылка
				|ИЗ
				|	Документ.Задание КАК Задание
				|ГДЕ
				|	НЕ Задание.ПометкаУдаления
				|	И Задание.КрайняяДатаРеакции <> ДАТАВРЕМЯ(1, 1, 1)
				|	И НЕ Задание.Завершено
				|	И &ДатаНачала <= ДОБАВИТЬКДАТЕ(Задание.КрайняяДатаРеакции, ЧАС, -&ВремяДоОповещения)
				|	И ДОБАВИТЬКДАТЕ(Задание.КрайняяДатаРеакции, ЧАС, -&ВремяДоОповещения) < &ДатаОкончания";
				
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВремяДоОповещения", ПравилоСобытия.ЧасовДоУсловия);	
		Запрос.УстановитьПараметр("ДатаНачала",        ДатаНачалаПроверки);
		Запрос.УстановитьПараметр("ДатаОкончания",     ДатаОкончанияПроверки);			
		
		РезультатЗапроса 	   = Запрос.Выполнить();			
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Новый Массив;
		Иначе	
			ТЗЗадания = РезультатЗапроса.Выгрузить();
		КонецЕсли;				
		
		НастройкиСКД = ПравилоСобытия.ПроверкаРеквизитовОбъектаУсловия.Получить();
		
		Если НастройкиСКД <> Неопределено Тогда
			
			СКД = Справочники.ПравилаСобытий.ПолучитьПравилаОтбораСобытий(
				ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяОбъекта);			
			ТекстЗапроса = СКД.НаборыДанных.НаборДанных1.Запрос;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Задание.Ссылка = &Основание", "Задание.Ссылка В (&Основание)");
			СКД.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;
			
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
			КомпоновщикНастроек.Восстановить();
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Основание", ТЗЗадания);
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки   = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(),,,
                Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Ложь);
			
			РезультатСКД    = Новый ТаблицаЗначений;
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(РезультатСКД);
			ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
			Если РезультатСКД.Количество() > 0 Тогда
				Возврат РезультатСКД.ВыгрузитьКолонку("Ссылка");			
			Иначе
				Возврат Новый Массив;
			КонецЕсли;
		Иначе 
			Возврат Новый Массив;	
		КонецЕсли;			
		
	КонецЕсли;
КонецФункции

&Вместо("ЕстьИзменениеВЧекЛисте")
Функция РСК_ЕстьИзменениеВЧекЛисте(Знач Источник, Знач ИсточникПередЗаписью)
	Если Источник.ЧекЛист.Количество() <> ИсточникПередЗаписью.ЧекЛист.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЧекЛист 			= Источник.ЧекЛист.Выгрузить();
	ЧекЛистПередЗаписью = ИсточникПередЗаписью.ЧекЛист.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ЧекЛист Цикл
		
		СтруктураПоиска = Новый Структура;
		
		Для Каждого Колонка Из ЧекЛист.Колонки Цикл
            СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
        КонецЦикла;
		
		СтрокиТаблицы2 = ЧекЛистПередЗаписью.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицы2.Количество() <> 1 Тогда
            Возврат Истина;
		КонецЕсли;
		
    КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ЧекЛистПередЗаписью Цикл
		
		СтруктураПоиска = Новый Структура;
		
		Для каждого Колонка Из ЧекЛистПередЗаписью.Колонки Цикл
            СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
        КонецЦикла;
		
		СтрокиТаблицы1 = ЧекЛист.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицы1.Количество() <> 1 Тогда
            Возврат Истина;
		КонецЕсли;
		
    КонецЦикла;
	
	Возврат Ложь
КонецФункции


#Область СозданиеНаОсновании


// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	//++РС Консалт: Минаков А.С.
	Документы.РС_Занятость.ДобавитьКомандуСоздатьНаОснованииЗаданиеПланерки(КомандыСозданияНаОсновании);
	Документы.РС_Занятость.ДобавитьКомандуСоздатьНаОснованииЗаданиеОтгулы(КомандыСозданияНаОсновании);
	Документы.РС_Занятость.ДобавитьКомандуСоздатьНаОснованииЗаданиеВнутрРаботы(КомандыСозданияНаОсновании);
	Документы.РС_Занятость.ДобавитьКомандуСоздатьНаОснованииЗаданиеОбучение(КомандыСозданияНаОсновании);
	//++РС Консалт: Минаков А.С.
КонецПроцедуры

// Добавляет команду создания документа "Задание".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	//++РС Консалт: Минаков А.С.
	Если ПравоДоступа("Добавление", Метаданные.Документы.Задание) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.Задание.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.Задание);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
	//++РС Консалт: Минаков А.С.
КонецФункции

#КонецОбласти