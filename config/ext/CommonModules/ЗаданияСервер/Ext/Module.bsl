//Пашков
Функция ЕстьНезакрытыеПодчиненныеЗадания(Основание, Задание) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьНезакрытыеПодчиненныеЗадания", Ложь);
	Результат.Вставить("Сообщение", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
               |	СвязанныеДокументы.Ссылка КАК Ссылка
               |ПОМЕСТИТЬ ПодчиненныеДокументы
               |ИЗ
               |	КритерийОтбора.СвязанныеДокументы(&Основание) КАК СвязанныеДокументы
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	Задание.Ссылка КАК Ссылка,
               |	Задание.Дата КАК Дата,
               |	Задание.Номер КАК Номер,
               |	Задание.ТекущийЭтап КАК ТекущийЭтап
               |ИЗ
               |	ПодчиненныеДокументы КАК ПодчиненныеДокументы
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание КАК Задание
               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроцессов КАК ЭтапыПроцессов
               |			ПО Задание.ТекущийЭтап = ЭтапыПроцессов.Ссылка
               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Процессы КАК Процессы
               |			ПО Задание.Процесс = Процессы.Ссылка
               |		ПО ПодчиненныеДокументы.Ссылка = Задание.Ссылка
               |ГДЕ
               |	Задание.Проведен
               |	И Задание.Ссылка <> &Задание
               |	И ЭтапыПроцессов.СостояниеЭтапа <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Закрыт)
               |	И Процессы.ТипПроцесса = &ТипПроцесса_Задача";
	
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("Задание", Задание);
	Запрос.УстановитьПараметр("ТипПроцесса_Задача", Справочники.ТипыПроцессов.ЗапросНаИзменение);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Сообщение = "";
		Пока Выборка.Следующий() Цикл
			
			Сообщение = Сообщение + Символы.ПС + Выборка.Дата + " " + Выборка.Номер + " статус: " + Выборка.ТекущийЭтап;
			
		КонецЦикла;
		
		Результат.ЕстьНезакрытыеПодчиненныеЗадания = Истина;
		Результат.Сообщение = Сообщение;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЭтапПроцессаПоСостоянию(Задание, Состояние) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроцессыЭтапы.Этап КАК Этап
		|ИЗ
		|	Справочник.Процессы.Этапы КАК ПроцессыЭтапы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроцессов КАК ЭтапыПроцессов
		|		ПО ПроцессыЭтапы.Этап = ЭтапыПроцессов.Ссылка
		|ГДЕ
		|	ПроцессыЭтапы.Ссылка = &Процесс И
		|	ЭтапыПроцессов.СостояниеЭтапа = &Состояние";
	
	Запрос.УстановитьПараметр("Процесс", Задание.Процесс);
	Запрос.УстановитьПараметр("Состояние", Состояние);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Этап;
	Иначе
		Возврат Неопределено;
	КонецЕсли;;
	
КонецФункции

&Вместо("ПолучитьСтруктуруПриПереходеЗаданияНаЭтап")
Функция РСК_ПолучитьСтруктуруПриПереходеЗаданияНаЭтап(Знач Объект, Знач КонечныйЭтап, Знач ВернутьСтруктуруПоУмолчанию)
	Результат = ПродолжитьВызов(Объект, КонечныйЭтап, ВернутьСтруктуруПоУмолчанию);
	
	Результат.Вставить("ТипПроцесса", ?(ТипЗнч(Объект) = Тип("ДокументСсылка.Задание"), Объект.ТипПроцесса, Объект.Ссылка.ТипПроцесса));
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокОснований(ДокументЗадание) Экспорт
	
	Основания = Новый Массив;
	
	Для каждого СтрокаОснование Из ДокументЗадание.Основания Цикл
		
		Основание = СтрокаОснование.Основание;
		
		Если ТипЗнч(Основание) <> Тип("ДокументСсылка.Задание")
			ИЛИ Основание.ТипПроцесса <> ПредопределенноеЗначение("Справочник.ТипыПроцессов.Инцидент") Тогда
			Продолжить;
		КонецЕсли;
		
		Основания.Добавить(Основание);
		
	КонецЦикла;
	
	Возврат Основания;
	
КонецФункции

Функция СовпадаетИсполнитель(ДокументЗадание, Основание) Экспорт
	
	Возврат ДокументЗадание.ТекущийИсполнитель = Основание.ТекущийИсполнитель;
	
КонецФункции

&Вместо("ПолучитьСписокВыбораИнициатора")
Функция РСК_ПолучитьСписокВыбораИнициатора(Знач СтрокаПоиска)
	
	СписокВыбораИнициатора = Новый СписокЗначений;

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	
	//ДанныеВыбораИнициатораПользователи 	= Справочники.Пользователи.ПолучитьДанныеВыбора(ПараметрыВыбора);
	//ДанныеВыбораИнициатораФизЛица 		= Справочники.ФизическиеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	//ДанныеВыбораСотрудника				= Справочники.Сотрудники.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораКонтактныеЛица			= Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	//ДанныеВыбораИнициатораКонтрагенты	= Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	//ДанныеВыбораИнициатораПодразделения	= Справочники.Подразделения.ПолучитьДанныеВыбора(ПараметрыВыбора);
	//ДанныеВыбораОрганизации				= Справочники.Организации.ПолучитьДанныеВыбора(ПараметрыВыбора);
	//ДанныеВыбораПотенциальногоКлиента	= Справочники.ПотенциальныеКлиенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	//
	//ДанныеВыбораОрганизации				= Справочники.Организации.ПолучитьДанныеВыбора(ПараметрыВыбора);
		
	//Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораПользователи Цикл
	//	Постфикс = НСтр("ru = '(пользователь)'");
	//	СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение,
	//		УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
	//			+ " " + Постфикс, СтрокаПоиска));
	//КонецЦикла;
	//Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораФизЛица Цикл
	//	Постфикс = НСтр("ru = '(физлицо)'");
	//	СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение,
	//		УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
	//			+ " " + Постфикс, СтрокаПоиска));
	//КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактныеЛица Цикл
		Постфикс = НСтр("ru = '(контактное лицо)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение,
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
			+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;	
	//Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораКонтрагенты Цикл
	//	Постфикс = НСтр("ru = '(контрагент)'");
	//	СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение,
	//		УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
	//			+ " " + Постфикс, СтрокаПоиска));
	//КонецЦикла;
	//Для Каждого ЭлементСписка Из ДанныеВыбораСотрудника Цикл
	//	Постфикс = НСтр("ru = '(сотрудник)'");
	//	СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
	//		УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
	//			+ " " + Постфикс, СтрокаПоиска));
	//КонецЦикла;
	//Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораПодразделения Цикл
	//	Постфикс = НСтр("ru = '(подразделение)'");
	//	СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
	//		УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
	//			+ " " + Постфикс, СтрокаПоиска));
	//КонецЦикла;
	//Для Каждого ЭлементСписка Из ДанныеВыбораОрганизации Цикл
	//	Постфикс = НСтр("ru = '(организация)'");
	//	СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
	//		УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
	//			+ " " + Постфикс, СтрокаПоиска));
	//КонецЦикла;
	//Для Каждого ЭлементСписка Из ДанныеВыбораПотенциальногоКлиента Цикл
	//	Постфикс = НСтр("ru = '(потенциальный клиент)'");
	//	СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
	//		УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
	//			+ " " + Постфикс, СтрокаПоиска));
	//КонецЦикла;
	
    Возврат СписокВыбораИнициатора;
    
КонецФункции

//++ РС Консалт: Полякова Елизавета Линоровна 20.02.2021 Задача 2109
//e1cib/data/Документ.Задание?ref=99ae48a6e71f81304c58fd0f857de675
&Вместо("ЗаполнитьСписокВыбораСтатусовЗаданий")
Процедура РСК_ЗаполнитьСписокВыбораСтатусовЗаданий(СписокВыбора) Экспорт
	СписокВыбора.Очистить();
	//СписокВыбора.Добавить("Новые", 					НСтр("ru = 'Новые'"));
	СписокВыбора.Добавить("Измененные", 				НСтр("ru = 'Измененные'"));
	//СписокВыбора.Добавить("ВРаботе", 					НСтр("ru = 'В работе'"));
	СписокВыбора.Добавить("НовыеВРаботе", 				НСтр("ru = 'Новые + В работе'"));	
	СписокВыбора.Добавить("Выполненные", 				НСтр("ru = 'Выполненные'"));
	//СписокВыбора.Добавить("Завершенные", 				НСтр("ru = 'Завершенные'"));
	СписокВыбора.Добавить("ВыполненныНоНеЗавершенные", 	НСтр("ru = 'Выполненные, но не завершенные'"));
	СписокВыбора.Добавить("НеЗакрытыеРС",				НСтр("ru = 'Не закрытые (РС)'"));
	//СписокВыбора.Добавить("ВыполненныеЗаНеделю",		НСтр("ru = 'Выполненные за неделю'"));
	//СписокВыбора.Добавить("Приостановлено", 			НСтр("ru = 'Приостановлено'"));
	//СписокВыбора.Добавить("Просрочено", 				НСтр("ru = 'Просрочено (Все)'"));
	//СписокВыбора.Добавить("ПросроченоНовыеВРаботе", 	НСтр("ru = 'Просрочено (Новые + В работе)'"));
	//СписокВыбора.Добавить("ПросроченоВыполненные", 		НСтр("ru = 'Просрочено (Выполненные)'"));
	//СписокВыбора.Добавить("СрокСегодня", 				НСтр("ru = 'Срок: сегодня'"));
	//СписокВыбора.Добавить("СрокЗавтра", 				НСтр("ru = 'Срок: завтра'"));
	//СписокВыбора.Добавить("СрокНеделя", 				НСтр("ru = 'Срок: 7 дней'"));	
КонецПроцедуры
//-- КонецЗадачи 2109