
&НаКлиенте
&Вместо("ПеревестиНаЭтап")
Процедура РСК_ПеревестиНаЭтап(Команда)
	
	ДатаАктуальности = ПолучитьДатуНаСервере();
	
	// Проверка, что текущий этап подпроцесс и он не выполнен.
	Если ПолученаСсылка Тогда
		ВыполненПодпроцесс = ЗаданияСервер.ВыполненПодпроцесс(СсылкаНаОбъект);
	Иначе
		ЗаданиеСтруктура = Новый Структура;
		ЗаданиеСтруктура.Вставить("ТекущийЭтап", ТекущийЭтап);
		ЗаданиеСтруктура.Вставить("Ссылка", 	 СсылкаНаОбъект);
		ВыполненПодпроцесс = ЗаданияСервер.ВыполненПодпроцесс(ЗаданиеСтруктура);
	КонецЕсли;	
	Если НЕ ВыполненПодпроцесс Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Текущий этап - подпроцесс. 
                  |Для его выполнения необходимо запустить и выполнить подпроцесс.
                  |После этого можно перейти на другой этап.'"));
		Возврат;
	КонецЕсли;
	
	СтруктураЭтапа = ЗаданияСервер.ПолучитьСтруктуруЭтапаПоИмениКоманды(Команда.Имя);
	
	Если СтруктураЭтапа = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Этап не найден.'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ЭтапПерехода = СтруктураЭтапа.Этап;	
		
	Если ПолученаСсылка Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НовыйЭтап", 			СтруктураЭтапа.Этап);
		СтруктураПараметров.Вставить("ПереданаСсылка", 		Истина);
		СтруктураПараметров.Вставить("ЗаписатьОбъект", 		Истина);
		СтруктураПараметров.Вставить("ФормаПереводаНаЭтап", Ложь);
		СтруктураПараметров.Вставить("Источник",       		?(ЗначениеЗаполнено(Источник), Источник, ЭтаФорма.УникальныйИдентификатор));
		Результат 			= ЗаданияКлиент.ПеревестиЗаданиеНаЭтап(СсылкаНаОбъект, СтруктураПараметров);
	Иначе
		СтруктураПараметров = СтруктураОбъекта;
		СтруктураПараметров.Вставить("Источник",       		?(ЗначениеЗаполнено(Источник), Источник, ЭтаФорма.УникальныйИдентификатор));
		СтруктураПараметров.Вставить("НовыйЭтап",      		СтруктураЭтапа.Этап);
		СтруктураПараметров.Вставить("ПереданаСсылка", 		Ложь);
		СтруктураПараметров.Вставить("ЗаписатьОбъект", 		Ложь);
		СтруктураПараметров.Вставить("ФормаПереводаНаЭтап", Истина);
		ОбъектЗадание 		= СтруктураОбъекта.ОбъектЗадание;	
		Результат 			= ЗаданияКлиент.ПеревестиЗаданиеНаЭтап(ОбъектЗадание, СтруктураПараметров);
	КонецЕсли;	
	
	Если Результат.ВыполненПеревод  = Истина Тогда
		
		Если Результат.ЭтапЗакрыт Тогда
			ЗакрытьОснованияЗадания(СсылкаНаОбъект, Результат);
		Иначе
			Закрыть(Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Пашков
&НаКлиенте
Процедура ЗакрытьОснованияЗадания(ДокументЗадание, Параметры) 
	
	Основания = ЗаданияСервер.ПолучитьСписокОснований(ДокументЗадание);
	
	НужноЗакрыть = Истина;
	Для каждого Основание Из Основания Цикл
		
		ЭтоТикет = ЭтоТикет(Основание);
		Если НЕ ЭтоТикет Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПодчиненныхЗаданий = ЗаданияСервер.ЕстьНезакрытыеПодчиненныеЗадания(Основание, ДокументЗадание);
		Если СтруктураПодчиненныхЗаданий.ЕстьНезакрытыеПодчиненныеЗадания Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаданияСервер.СовпадаетИсполнитель(ДокументЗадание, Основание) Тогда
			
			ТекстВопроса = "Для " + Строка(Основание) + " закрыты все подчиненные задания. Закрыть тикет?";
			ПараметрыВопроса = Новый Структура;
			ПараметрыВопроса.Вставить("Основание", Основание);
			ПараметрыВопроса.Вставить("Результат", Параметры);
			Оповещение_ПослеЗакрытияВопроса = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_ЗакрытиеТикета", ЭтотОбъект, ПараметрыВопроса);
			Режим = РежимДиалогаВопрос.ДаНет;
			
			ПоказатьВопрос(Оповещение_ПослеЗакрытияВопроса, ТекстВопроса, Режим);
			
			НужноЗакрыть = Ложь;
			
		Иначе
			
			Параметры.Вставить("НужноУстановитьСтатусВыполнен", Истина);
			Параметры.Вставить("Основание", Основание);
			Параметры.Вставить("Результат", Параметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НужноЗакрыть Тогда
		Закрыть(Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоТикет(Основание)
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.Задание") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Процесс = Основание.Процесс;
	ТипПроцесса = Процесс.ТипПроцесса;
	
	Возврат ТипПроцесса = Справочники.ТипыПроцессов.Инцидент;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса_ЗакрытиеТикета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Результат = ДополнительныеПараметры.Результат;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Результат.Вставить("НужноЗакрытьОснование", Истина);
		
		СсылкаНаОбъект = ДополнительныеПараметры.Основание;
		
		Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцесса.Закрыт");
		Этап = ЗаданияСервер.ПолучитьЭтапПроцессаПоСостоянию(СсылкаНаОбъект, Состояние);
		
		Если Этап = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Не удалось найти закрывающий этап для процесса задания %1'"), Строка(СсылкаНаОбъект)));
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НовыйЭтап", 			Этап);
		СтруктураПараметров.Вставить("ПереданаСсылка", 		Истина);
		СтруктураПараметров.Вставить("ЗаписатьОбъект", 		Истина);
		СтруктураПараметров.Вставить("ФормаПереводаНаЭтап", Ложь);
		
		Результат.Вставить("СтруктураПараметров", СтруктураПараметров);
		Результат.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
		
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупреждения_ТикетВыполнен(Параметры) Экспорт
	
	Основание = Параметры.Основание;
	
	Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцесса.Выполнен");
	Этап = ЗаданияСервер.ПолучитьЭтапПроцессаПоСостоянию(Основание, Состояние);
	
	Если Этап = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
		НСтр("ru = 'Не удалось найти закрывающий этап для процесса задания %1'"), Строка(Основание)));
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НовыйЭтап", 			Этап);
	СтруктураПараметров.Вставить("ПереданаСсылка", 		Истина);
	СтруктураПараметров.Вставить("ЗаписатьОбъект", 		Истина);
	СтруктураПараметров.Вставить("ФормаПереводаНаЭтап", Ложь);
	СтруктураПараметров.Вставить("ПроверятьПодчиненныеЗадания", Ложь);
	
	Результат = ЗаданияКлиент.ПеревестиЗаданиеНаЭтап(Основание, СтруктураПараметров);
	
КонецПроцедуры
