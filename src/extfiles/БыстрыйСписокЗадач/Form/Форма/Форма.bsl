
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Список.ТекстЗапроса = ТекстЗапроса(Список.ТекстЗапроса);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.Список.СоздатьЭлементыФормыПользовательскихНастроек(Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗапроса(ИсходныйТекст)

	
	Текст = СтрЗаменить(
		ИсходныйТекст, 
		"ВЫРАЗИТЬ(0 КАК ЧИСЛО(6, 2)) КАК СогласованоЧасов,",
		"Задание.СогласованоЧасов КАК СогласованоЧасов,"
	);

	Текст = 
		"
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	СУММА(ВложенныйЗапрос.ВремяКлиентаПриход) КАК Факт
		|ПОМЕСТИТЬ ФактЧасы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Задание.Ссылка КАК Ссылка,
		|		СУММА(РС_РаботыОбороты.ВремяКлиентаПриход) КАК ВремяКлиентаПриход
		|	ИЗ
		|		Документ.Задание КАК Задание
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РС_Работы.Обороты КАК РС_РаботыОбороты
		|			ПО Задание.Ссылка = РС_РаботыОбороты.Занятость.Задание
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Задание.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		докЗадание.Ссылка,
		|		СУММА(ВЫБОР
		|				КОГДА РС_Занятость.ВремяКлиента > 0
		|					ТОГДА 0
		|				ИНАЧЕ РС_Занятость.ФактическаяТрудоемкость
		|			КОНЕЦ)
		|	ИЗ
		|		Документ.РС_Занятость КАК РС_Занятость
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание КАК докЗадание
		|			ПО РС_Занятость.Задание = докЗадание.Ссылка
		|	ГДЕ
		|		РС_Занятость.СпособРасчетаВремениКлиента = 4
		|	
		|	СГРУППИРОВАТЬ ПО
		|		докЗадание.Ссылка) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|" + Текст;
	
	Текст = СтрЗаменить(
		Текст,
		"ВЫРАЗИТЬ(0 КАК ЧИСЛО(6, 2)) КАК Факт,",
		"ЕСТЬNULL(ФактЧасы.Факт, 0) КАК Факт,"
	);
	
	Текст = СтрЗаменить(
		Текст,
		"	Задание.КрайняяДатаВыполнения КАК КрайняяДатаВыполнения
		|ИЗ
		|	Документ.Задание КАК Задание",
		"	Задание.КрайняяДатаВыполнения КАК КрайняяДатаВыполнения
		|ИЗ
		|	Документ.Задание КАК Задание
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФактЧасы КАК ФактЧасы
		|		ПО Задание.Ссылка = ФактЧасы.Ссылка"
	);
	
	Возврат Текст;
	
КонецФункции // ТекстЗапроса()

&НаКлиенте
Процедура ОткрытьЗаданиеПоНомеру(Команда)
	Стр = "";
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ОткрытьЗаданиеПоНомеруЗавершение",
		ЭтотОбъект, Новый Структура("Стр", Стр)), Стр, НСтр("ru = 'Введите № задачи'"), 20, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданиеПоНомеруЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Стр = ?(Строка = Неопределено, ДополнительныеПараметры.Стр, Строка);
	
	Если Стр <> Неопределено И СокрЛП(Стр) <> "" Тогда
		
		Значение = НайтиЗаданиеПоНомеру(Стр);
		Если ЗначениеЗаполнено(Значение) Тогда
			ПоказатьЗначение(, Значение);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Задание с номером ""*%1"" не найдено'"),
				Стр));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаданиеПоНомеру(Знач Номер)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Задание.Ссылка
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	Задание.Номер ПОДОБНО &Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задание.Номер УБЫВ";
	Запрос.УстановитьПараметр("Номер", "%" + Номер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Документы.Задание.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура КомментарийВБуферОбмена(Команда)
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияКлиент.РС_КомментарийВБуферОбмена(Элементы.Список.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗанятость(Команда)
	ВыделеннаяСтрока = Элементы.Список.ВыделенныеСтроки.Получить(0);
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДокументЗадания", ВыделеннаяСтрока);
 	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
 	ОткрытьФорму("Документ.РС_Занятость.Форма.ФормаДокументаБыстраяЗанятость", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаЭтап(Команда)
	
	ТД = Элементы.Список.ТекущиеДанные;
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = ПолучитьСписокДоступныхЭтапов();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКомпоновки);
	Если ТД <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТД.ТекущийЭтап);
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.ЭтапыПроцессов.ФормаВыбора", 
		ПараметрыФормы, 
		ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ПослеВыбораЭтапа", ЭтаФорма), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхЭтапов()

	СписокЭтапов = Новый СписокЗначений;
	СписокЭтапов.Добавить(Справочники.ЭтапыПроцессов.НайтиПоНаименованию("Выполнение",Истина));
	СписокЭтапов.Добавить(Справочники.ЭтапыПроцессов.НайтиПоНаименованию("Выполнено",Истина));
	СписокЭтапов.Добавить(Справочники.ЭтапыПроцессов.НайтиПоНаименованию("К выполнению",Истина));
	СписокЭтапов.Добавить(Справочники.ЭтапыПроцессов.НайтиПоНаименованию("Отменено",Истина));
	СписокЭтапов.Добавить(Справочники.ЭтапыПроцессов.НайтиПоНаименованию("Принято заказчиком",Истина));
	СписокЭтапов.Добавить(Справочники.ЭтапыПроцессов.НайтиПоНаименованию("Проверка",Истина));
	СписокЭтапов.Добавить(Справочники.ЭтапыПроцессов.НайтиПоНаименованию("Распределено (принято в работу)",Истина));
	СписокЭтапов.Добавить(Справочники.ЭтапыПроцессов.НайтиПоНаименованию("Уточнение требований",Истина));
	
	Возврат СписокЭтапов;

КонецФункции // ПолучитьСписокДоступныхЭтапов()


&НаКлиенте
Процедура ПослеВыбораЭтапа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ё = 0;
	Для Каждого Задача Из Элементы.Список.ВыделенныеСтроки Цикл
		ё = ё + 1;
		Состояние(
			""+ё+" из "+Элементы.Список.ВыделенныеСтроки.Количество(), 
			ё * 100 / Элементы.Список.ВыделенныеСтроки.Количество()
		);
		УстановкаСтатусаЗадачи(Задача, Результат);
	КонецЦикла;
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановкаСтатусаЗадачи(Задача, Статус)

	оДок = Задача.ПолучитьОбъект();
	оДок.ТекущийЭтап = Статус;
	оДок.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

КонецПроцедуры // УстановкаСтатусаЗадачи()

&НаКлиенте
Процедура ВыбратьИсполнителя(Команда)
	
	ДокументЗадание = Элементы.Список.ТекущаяСтрока;
	Если ДокументЗадание <> Неопределено И ТипЗнч(ДокументЗадание) = Тип("ДокументСсылка.Задание") Тогда
		
		Если ИзменениеЗавершенногоЗаданияЗапрещено(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, Нстр("ru = 'Задание завершено. Изменение исполнителя в задании не возможно.'"));
			Возврат;
		КонецЕсли;
		
		Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Вы не можете изменить исполнителя у данного задания.'"));
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИсполнителяФормаЗавершение", ЭтотОбъект, ДокументЗадание);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИсполнителя", Новый Структура("СсылкаНаОбъект", ДокументЗадание),
			ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеЗавершенногоЗаданияЗапрещено(Знач ЗаданиеСсылка)
	
	Результат = Ложь;
	Если ЗаданиеСсылка.Завершено 
		И НЕ УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИзменятьЗавершенныеЗадания") Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьИсполнителяПриПереводеНаЭтап(Знач Задание)
			
	Возврат ЗаданияСервер.ПравоРедактированияТекущийПользователь(Задание);
	
КонецФункции

&НаКлиенте
Процедура ВыбратьИсполнителяФормаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого ЗаданиеСсылка Из Элементы.Список.ВыделенныеСтроки Цикл
			ВыбратьИсполнителяИзДиалогаНаСервере(ЗаданиеСсылка, Результат);
		КонецЦикла;
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьИсполнителяИзДиалогаНаСервере(Знач ЗаданиеСсылка, Знач Результат)
	
	Если ИзменениеЗавершенногоЗаданияЗапрещено(ЗаданиеСсылка) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(Нстр("ru = '%1 завершено. Изменение исполнителя в задании не возможно.'"), Результат));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ЗаданиеСсылка) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Вы не можете изменить текущего исполнителя у %1'"), Результат));
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ЗаданиеОбъект 						= ЗаданиеСсылка.ПолучитьОбъект();
		ЗаданиеОбъект.ТекущийИсполнитель 	= Результат;
		ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	Элементы.Список.Обновить();
КонецПроцедуры
